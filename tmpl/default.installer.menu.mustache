# Default Installation menu
# Make sure this does not ovewrite anything
# rsync -av default_inst ${TFTP_HOST}:${TFTP_PATH}/pxelinux.cfg/default
# Installer kernel / ramdisk on out-of-box Ubuntu TFTP
# - ubuntu-installer/amd64/linux
# - ubuntu-installer/amd64/initrd.img
# Simple generation of menu file with mustache:
# cat global.conf.json | ./node_modules/mustache/bin/mustache - ./default_inst

#default menu.c32

# Needed *only* for Ubuntu default `ubuntu-installer` based boot file hierarchy (Not if files are
# simply placed in root dir)
#path ubuntu-installer/amd64/boot-screens/
# ???? default ubuntu-installer/amd64/boot-screens/libcom.c32
# Simplified to root
#default ubuntu-installer/amd64/boot-screens/vesamenu.c32
# Removed to prefer logic below
# default vesamenu.c32
# Failed to load COM32 file ubuntu-installer/amd64/boot-screens/stdmenu.c32
#default ubuntu-installer/amd64/boot-screens/stdmenu.c32
# TEMPORARILY DISABLED. Gives grayish / silvery background
#menu background ubuntu-installer/amd64/boot-screens/splash.png
menu title LiNetBoot Tools and Install Menu

prompt 0
## timeout 100
timeout {{{ tftp.menutout }}}
# Declaring Default menuitem makes this boot directly to it (independent of timeout !?)
# OLD: default local
# Templated (w. non-empty):
{{#tftp.menudef}}default {{{ tftp.menudef }}}{{/tftp.menudef}}
{{^tftp.menudef}}default vesamenu.c32{{/tftp.menudef}}

# Note: Moved to using Gparted (0.31.0-1-amd64, Linux 4.15) for kernel
# See: https://gparted.org/download.php
label local
menu label  Boot From Local First Part. (First Disk, sda1)
#kernel http://{{ httpserver }}/vmlinuz
kernel http://{{ httpserver }}/gparted/live/vmlinuz
initrd http://{{ httpserver }}/gparted/live/initrd.img
append root=/dev/sda1

# Same as first menu iten, but second partition
label local2
menu label  Boot From Local Second Part. (First Disk, sda2)
kernel http://{{ httpserver }}/gparted/live/vmlinuz
initrd http://{{ httpserver }}/gparted/live/initrd.img
append root=/dev/sda2


# There are 3 memtest binaries in /boot/: memtest86+.bin  memtest86+.elf and memtest86+_multiboot.bin
# All files get correctly fetched by HTTP, but there are execution
# problems. Esp. Ubuntu memtest binaries do not seem to work. Centos and Gparted memtest binaries DO work.
# Possible problem (.elf): "Booting kernel failed: Invalid argument"
# From internet: Could not boot: Invalid argument, Could not boot image: Invalid argument
# http://omniboot.org/txt/memtest8.pdf
# http://forum.ipxe.org/showthread.php?tid=7937 has memtest.0 link: http://boot.ipxe.org/memtest.0
# Does NOT Boot with efi64/syslinux.efi
label memtest
menu label  Memory Test (memtest86, Live)
# This would be HTTP path
#kernel http://{{ httpserver }}/memtest86+.bin
#kernel http://{{ httpserver }}/memtest86+.elf
#kernel http://{{ httpserver }}/memtest86+_multiboot.bin
#kernel http://{{ httpserver }}/memtest.0
# Centos 6 provided memtest (works!)
#kernel http://{{ httpserver }}/centos6/isolinux/memtest
# Gparted provided memtest (works!)
kernel http://{{ httpserver }}/gparted/live/memtest
# TFTP Path
#kernel memtest86+

# http://www.wonkity.com/~wblock/docs/html/pxe.html
label hdt
menu label HDT - Hardware Detection tool
kernel hdt.c32

# GpartEd (https://gparted.org/livepxe.php)
# This boot seems to be sometimes (but rarely) failing on Dell D830 with lack of network detection network card support. Works always with Dell servers.
# https://gparted.org/gparted-live-boot-param.php => https://gparted.org/display-doc.php?name=debian-live-config
# nfsopts=vers=3 ? debug=1 httpfs=URL
# config
# live-config.timezone={{ inst.time_zone }} utc=yes
# Certified to Boot with efi64/syslinux.efi
label gparted
menu label GpartEd Live (Ramdisk Netboot)
kernel http://{{ httpserver }}/gparted/live/vmlinuz
initrd http://{{ httpserver }}/gparted/live/initrd.img
append boot=live  components union=overlay username=user noswap noeject ip= vga=788 fetch=http://{{ httpserver }}/gparted/live/filesystem.squashfs keyb=us gl_kbd=us gl_lang=en_US gl_numlk=off gl_batch nolocales

# TODO: System Rescue CD (https://www.system-rescue.org/Download/)
# systemrescue-7.00-amd64.iso
# https://www.system-rescue.org/manual/PXE_network_booting/
# label sysresc
# menu label System Rescue CD (Live)
# kernel http://{{ httpserver }}/sysresccd/boot/x86_64/vmlinuz
# INITRD sysresccd/boot/intel_ucode.img,sysresccd/boot/amd_ucode.img,sysresccd/boot/x86_64/sysresccd.img
# NOT: append initrd=http://{{ httpserver }}/sysresccd copytoram setkmap=us
# APPEND archisobasedir=sysresccd ip=dhcp archiso_http_srv=http://10.0.2.4/ checksum
# SYSAPPEND 3

# Clonezilla Live PXE
# Example almost directly from https://clonezilla.org/livepxe.php
# ...but converted to Linetboot HTTP context.
# TODO: Convert to current mainstream iso loop mount scheme
# Certified to Boot with efi64/syslinux.efi (net/dhcp problems)
# Removed: quiet
label clonezilla
menu label Clonezilla Live (Ramdisk Netboot)
kernel http://{{ httpserver }}/clzilla/live/vmlinuz
initrd http://{{ httpserver }}/clzilla/live/initrd.img
# nolocales
append boot=live username=user union=overlay config components  noswap edd=on nomodeset nodmraid locales= keyboard-layouts=us ocs_live_run="ocs-live-general" ocs_live_extra_param="" ocs_live_batch=no net.ifnames=0 nosplash noprompt fetch=http://{{ httpserver }}/clzilla/live/filesystem.squashfs

# Digabi OS / Abitti Exam Environment (file is a multi-partition image)
# file koe.img: DOS/MBR boot sector; partition 1 ... partition 4 ... (all info given in "sectors")
# bad file number
# https://serverfault.com/questions/841493/pxe-booting-img-and-dd-images
# Try also append harddisk
#label abitti
#menu label Digabi OS / Abitti Exam Environment
#kernel /memdisk
#initrd http://{{ httpserver }}/koe.img
##append raw
##sysappend 3

# Debian MATE. Boots up to installer, but installer obscesses about CD/DVD being present (!)
#label debian10mate
#menu label Debian 10 MATE Live
#kernel http://{{ httpserver }}/debian10mate/d-i/vmlinuz
#initrd http://{{ httpserver }}/debian10mate/d-i/initrd.gz
#append interface=auto

# TODO: Debian 8 Jessie

# TODO: Debian 9 Stretch
# Per Erik Debian 9 can PXE directly from ISO w/o netboot.tar.gz

# Debian 10 Buster
# # Debian - General
# Note: Debian calls PXE bootting "netboot" and term PXE appears practically in none of Debian documentation.
# Like with many other distros, the kernel used has to be perfect version match to Package content as some packages
# are (possibly) kernel modules.
# Root for different distro versions (e.g. 8,9,10): http://ftp.us.debian.org/debian/dists/
# See: https://www.debian.org/distrib/netinst
# For cleanest and most supported Debian PXE boot we need (try replace distro name for your distro, e.g. "stretch"
# these 2 are usually alwasy side-by-side in same website directory):
# - http://http.us.debian.org/debian/dists/buster/main/installer-amd64/current/images/netboot/netboot.tar.gz (~35MB) OR 
# - http://http.us.debian.org/debian/dists/buster/main/installer-amd64/current/images/netboot/mini.iso - netboot installer (~48MB)
# 
# ## Unpacking netboot.tar.gz
# Example for Debian 10/Buster
# ```
# sudo mkdir /isomnt/debian10net; cd /isomnt/debian10net
# wget http://http.us.debian.org/debian/dists/buster/main/installer-amd64/current/images/netboot/netboot.tar.gz
# sudo tar zxvf netboot.tar.gz
# ```
label debian10
menu label Debian 10 Buster (Full Automated / WIP)
# These paths are valid for (e.g) debian-10.7.0-amd64-DVD-1.iso, debian-10.4.0-amd64-DVD-1.iso (both ~3.9GB)
# kernel http://{{ httpserver }}/debian10/install.amd/vmlinuz
# initrd http://{{ httpserver }}/debian10/install.amd/initrd.gz
# Paths for netboot.tar.gz (Unpackaged with instructions above)
kernel http://{{ httpserver }}/debian10net/debian-installer/amd64/linux
initrd http://{{ httpserver }}/debian10net/debian-installer/amd64/initrd.gz
# initrd http://{{ httpserver }}/debian1070-installer/initrd.gz
append priority=critical auto=true interface=auto ipv6.disable=1 url=http://{{ httpserver }}/preseed.cfg?osid=debian10

# Ubuntu 18 Desktop
# https://askubuntu.com/questions/1069907/why-is-it-not-possible-to-pxe-boot-ubuntu-desktop-editions
# https://askubuntu.com/questions/1029017/pxe-boot-of-18-04-iso
# https://www.tecmint.com/install-ubuntu-via-pxe-server-using-local-dvd-sources/ - How to Install Ubuntu via PXE Server Using Local DVD Sources (THE Solution for booting Ubu 18 DT with PXE)
# See also (ISO image): boot/grub/loopback.cfg
# https://www.vercot.com/~serva/an/NonWindowsPXE3.html
# https://askubuntu.com/questions/1029017/pxe-boot-of-18-04-iso - Hints on NFS based boot
# https://help.ubuntu.com/community/DisklessUbuntuHowto - No info on HTTP
# https://askubuntu.com/questions/1125792/how-do-i-set-up-pxe-boot-to-use-preseed - Hint on using live-installer/net-image directly on kernel CL
# - https://jphein.com/editing-the-pxe-boot-menu-using-ubuntu-18-04-ltsp/ - Preseed suggestions
# https://netboot.xyz/booting/tftp/
# https://www.linuxquestions.org/questions/slackware-14/initramfs-unable-to-find-a-medium-containing-a-live-file-system-4175595144/ - Misc discussion
# https://github.com/benhylau/pi-pxe-server/issues/1
# https://www.golinuxcloud.com/extract-initramfs-cpio-premature-end-archive/ - Diging into CPIO archives
# https://bugs.launchpad.net/ubuntu/+source/cloud-initramfs-tools/+bug/1761573 Boot problems
# https://www.kernel.org/doc/html/latest/admin-guide/initrd.html - Initrd mechanics
# https://www.cyberciti.biz/tips/10-boot-time-parameters-you-should-know-about-the-linux-kernel.html
# https://wiki.ubuntu.com/LiveCDNetboot - Ubuntu Desktop Live boot instructions
label ubuntu18dt32
menu label Ubuntu MATE 18 Desktop (32bit, Live)
kernel http://{{ httpserver }}/ubuntu18dt32/casper/vmlinuz
initrd http://{{ httpserver }}/ubuntu18dt32/casper/initrd
# fetch=http://{{ httpserver }}/ubuntu18dt32/casper/filesystem.squashfs toram 
# url=http://{{ httpserver }}/ubuntu18dt32/preseed/ubuntu-mate.seed
# 1) Working config for NFS dependent setup (Mounts NFS server:/ubu/inst/root under /cdrom)
append boot=casper netboot=nfs nfsroot={{ nfsserver }}:/isomnt/ubuntu18dt32/ ip=dhcp toram
# 2) HTTP Only (Use preseed: /preseed.desktop.cfg which contains a "redirect url"
# (d-i live-installer/net-image installer directive) for FS image casper/filesystem.squashfs)
# - ip: Recommended: ip=dhcp (Also: ip=append, ip=frommedia)
# - boot=casper seems to be needed (Although this causes: stdin: Not a typewriter and "unable to find medium containing a live file system")
# - Use http://{{ httpserver }} or relative-only ?
# - Other suggested vga=788 . vga=normal ? auto=true ? drop boot=casper (after initrd). 
# - Consider stripping "toram" (after ip=dhcp) for memory usage reasons (for NFS-way noram works, but filesystem.squashfs is missing from process). To ram may also be form (w. live-media-path for Slackware): live-media-path toram=filesystem.squashfs
# - Additional suggested: ipv6.disable=1 systemd.mask=tmp.mount (Simply:) ro.
# - Addl (1125792 above): ramdisk_size=16432 root=/dev/rd/0 (Note: some of these failed w. Q author)
# - Eliminate indirection by:
#   - Remove preseed URL: url=...   url=http://{{ httpserver }}/preseed.desktop.cfg
#   - Add: live-installer/net-image=http://{{ httpserver }}/ubuntu18dt32/casper/filesystem.squashfs
#   - May need to be added: ramdisk_size=16432 root=/dev/rd/0 rw
# 
# append initrd=http://{{ httpserver }}/ubuntu18dt32/casper/initrd boot=casper live-installer/net-image=http://{{ httpserver }}/ubuntu18dt32/casper/filesystem.squashfs ip=dhcp toram ipv6.disable=1
# 3) Live media path OR toram=...
# /casper or /casper/filesystem.squashfs (or permutations with http://{{ httpserver }}/ubuntu18dt32/casper/filesystem.squashfs
# Causes: run-init: current directory on the same filesystem as the root: error 0
# Try possibly similar to: root=squash:http://192.168.9.10:5248/images/ubuntu/amd64/ga-18.04/bionic/daily/squashfs
# append initrd=http://{{ httpserver }}/ubuntu18dt32/casper/initrd boot=casper live-media-path=http://{{ httpserver }}/ubuntu18dt32/casper/ debug ip=dhcp toram=filesystem.squashfs ipv6.disable=1 vga=normal fb=false root=/dev/rd/0

label ubuntu18dt
menu label Ubuntu MATE 18 Desktop (64bit, Live)
kernel http://{{ httpserver }}/ubuntu18dt/casper/vmlinuz
initrd http://{{ httpserver }}/ubuntu18dt/casper/initrd
append boot=casper netboot=nfs nfsroot={{ nfsserver }}:/isomnt/ubuntu18dt/ ip=dhcp toram

# MATE 20.04 Conservative config, mimick 18.X Working NFS install
label ubuntu20dt
menu label Ubuntu MATE 20 Desktop (64bit, Live)
kernel http://{{ httpserver }}/ubuntu20dt/casper/vmlinuz
initrd http://{{ httpserver }}/ubuntu20dt/casper/initrd
append boot=casper netboot=nfs nfsroot={{ nfsserver }}:/isomnt/ubuntu20dt/ debug ip=dhcp toram

# Ubuntu kickstart DISABLED, waiting for Centos Install
# label localinst_ks
# menu label Installer Boot - Kickstart (First Disk ignored)
# kernel http://{{ httpserver }}/linux
# #kernel ubuntu-installer/amd64/linux
# # TODO: Add: auto=true 
# append initrd=http://{{ httpserver }}/initrd.gz -- ks=http://192.168.1.141/ks.cfg
# #append initrd=ubuntu-installer/amd64/initrd.gz root=/dev/sda1

# Ubuntu Server 20.04 w. Subiquity based "modern" installer
# Default image relies on completely new subiquity installer ("live-installer") and YAML autoinstall mechanism (non-preseed).
# Seems to not work without special kernel options on 2GB RAM machines
# - No settings: ("79% 717 MB ... (initramfs) wget: short write: No space left on device")
# - root=/dev/ram0 ramdisk_size=1500000 Freeze at "System time synchronized"
# - root=/dev/ram0 ramdisk_size=1650000 At time settings: Out of memory (cloud-init), but continues for ~ 10 lines
# https://ubuntu.com/server/docs/install/autoinstall-quickstart
# https://askubuntu.com/questions/1235723/automated-20-04-server-installation-using-pxe-and-live-server-image
# OLDER: https://wiki.ubuntu.com/UEFI/PXE-netboot-install
# See also next boot item for preseed based "legacy" installer.
# Discussed on: https://discourse.ubuntu.com/t/netbooting-the-live-server-installer/14510/9
# Seems file / URL path downloaded is "user-data"
# Needs also file (in same path): "meta-data: instance-id: focal-autoinstall
# Seems loop-mounted dir is not accepted url=... must be an ISO file. Note: must have kernel param autoinstall.
label ubuntu2004
menu label Install Ubuntu 20.04 Server (TODO: Automated)
kernel http://{{ httpserver }}/ubuntu20/casper/vmlinuz
initrd http://{{ httpserver }}/ubuntu20/casper/initrd
append ip=dhcp url=http://{{ httpserver }}/ubuntu-20.04-live-server-amd64.iso autoinstall ds=nocloud-net;s=http://{{ httpserver }}/ root=/dev/ram0 ramdisk_size=1600000
# NONEED(?): priority=critical auto=true interface=auto ipv6.disable=1
# MAY NEED: root=/dev/ram0 ramdisk_size=1500000
# Also append syntax: ds=nocloud-net;local-hostname=server01;seedfrom=http://{{ httpserver }}/
# "s" seems to be alias for "seedfrom"

# Ubuntu 20.04 Legacy (preseed) installer
# http://archive.ubuntu.com/ubuntu/dists/focal/main/installer-amd64/current/legacy-images/netboot/mini.iso
# http://cdimage.ubuntu.com/ubuntu-legacy-server/releases/20.04/release/ubuntu-20.04.1-legacy-server-amd64.iso <= USE THIS for preseed
label ubuntu2004legacy
menu label Install Ubuntu 20.04 Server - legacy preseed (TODO: Automated)
kernel http://{{ httpserver }}/ubuntu20legacy/install/netboot/ubuntu-installer/amd64/linux
initrd http://{{ httpserver }}/ubuntu20legacy/install/netboot/ubuntu-installer/amd64/initrd.gz
append priority=critical auto=true interface=auto ipv6.disable=1 url=http://{{ httpserver }}/preseed.cfg?osid=ubuntu20

label ubuntu1804
menu label Install Ubuntu 18.04 Server (Full Automated)
kernel http://{{ httpserver }}/ubuntu18/install/netboot/ubuntu-installer/amd64/linux
initrd http://{{ httpserver }}/ubuntu18/install/netboot/ubuntu-installer/amd64/initrd.gz
# Must have: "auto=true" (Not only "auto", which may be sufficient for older distros)
# --
# priority:
# - Default, works best for prod: priority=critical (works alternate to hostname...,domain... below)
# - debconf/priority=high
# - Debugging install and show (menu) components: install debconf/priority=medium 
# hostname=unassigned-hostname domain=unassigned-domain. DEBCONF_DEBUG=5
# Skip tasksel: tasksel:tasksel/first=""
append priority=critical auto=true interface=auto ipv6.disable=1 url=http://{{ httpserver }}/preseed.cfg?osid=ubuntu18
# (First Disk ignored)
#append initrd=ubuntu-installer/amd64/initrd.gz root=/dev/sda1

# https://superuser.com/questions/1247353/ubuntu-16-04-pxe-netboot-preseed-install
# locale=en_US.UTF-8 console-setup/ask_detect=false console-setup/layoutcode=us keyboard-configuration/layoutcode=us
# mirror/http/mirror=ca.archive.ubuntu.com netcfg/get_hostname=
# preseed/interactive=false
label ubuntu1604
menu label Install Ubuntu 16.04 Server (Full Automated)
kernel http://{{ httpserver }}/ubuntu16/install/netboot/ubuntu-installer/amd64/linux
initrd http://{{ httpserver }}/ubuntu16/install/netboot/ubuntu-installer/amd64/initrd.gz
append priority=critical auto=true interface=auto ipv6.disable url=http://{{ httpserver }}/preseed.cfg?osid=ubuntu16 preseed/interactive=false

label ubuntu1404
menu label Install Ubuntu 14.04 Server (Full Automated)
kernel http://{{ httpserver }}/ubuntu14/install/netboot/ubuntu-installer/amd64/linux
initrd http://{{ httpserver }}/ubuntu14/install/netboot/ubuntu-installer/amd64/initrd.gz
#kernel ubuntu-installer/amd64/linux
# Must have: auto=true 
# --
# priority=critical (works alternate to hostname...,domain... below) Another: debconf/priority=high
# hostname=unassigned-hostname domain=unassigned-domain
# Seems Ubu14 should use live-installer/net-image (https://ubuntuforums.org/showthread.php?t=2228972)
# 
append priority=critical auto=true interface=auto DEBCONF_DEBUG=5 ipv6.disable=1 url=http://{{ httpserver }}/preseed.cfg?osid=ubuntu14 live-installer/net-image=http://{{ httpserver }}/ubuntu14/install/filesystem.squashfs
# (First Disk ignored)
#append initrd=ubuntu-installer/amd64/initrd.gz root=/dev/sda1

# Centos 8
label centos8
menu label CentOS 8.2 (Full Automated)
kernel http://{{ httpserver }}/centos8/images/pxeboot/vmlinuz
initrd http://{{ httpserver }}/centos8/images/pxeboot/initrd.img
append auto=true devfs=nomount method=http://{{ httpserver }}/centos8/ ks=http://{{ httpserver }}/ks.cfg?osid=centos7

# Centos 7
# See: https://www.tecmint.com/install-pxe-network-boot-server-in-centos-7/
# https://projects.theforeman.org/issues/4506 .. on  ksdevice=bootif network kssendmac
# http://forum.ipxe.org/showthread.php?tid=5445
# https://docs.oracle.com/cd/E92593_01/E64608/html/ol-bootcfg-file.html - Info about UEFI Based PXE clients menu format
label centos7
menu label Install CentOS 7 (Full Automated)
# method=http://mirror.centos.org/centos/7/os/x86_64/
# Note: Centos 7 says: 'method=' is deprecated. Using 'repo=http://...' instead. --noipv6 should be supported.
# RH 6 supports param "text" (?)
kernel http://{{ httpserver }}/centos7/images/pxeboot/vmlinuz
initrd http://{{ httpserver }}/centos7/images/pxeboot/initrd.img
# Change "repo=..." => "method=..."
# Centos doc: inst.ks= ?
# NOTE: Cannot use method=http://mirror.centos.org/centos/7/os/x86_64/ as mixed version components may result.
# Use method=http://{{ httpserver }}/centos7/ with big-enough (not *mini* or *net*) ISO to have all needed pkgs available.
append auto=true devfs=nomount method=http://{{ httpserver }}/centos7/ ks=http://{{ httpserver }}/ks.cfg?osid=centos7

# ISO: CentOS-6.10-x86_64-netinstall.iso (at ... http://isoredirect.centos.org/centos/6/isos/x86_64/)
# Mirror: http://mirrors.sonic.net/centos/6.10/os/x86_64/ http://mirror.centos.org/centos/6.10/os/x86_64/
label centos6
menu label Install CentOS 6 (Full Automated)
kernel http://{{ httpserver }}/centos6/images/pxeboot/vmlinuz
initrd http://{{ httpserver }}/centos6/images/pxeboot/initrd.img
# devfs=nomount
# method=http://{{ httpserver }}/centos6
# Note: Is auto=true hampering this
append auto=true devfs=nomount ks=http://{{ httpserver }}/ks.cfg?osid=centos6

label redhat8
menu label RedHat 8.X (TODO: Full Automated)
kernel http://{{ httpserver }}/redhat8/images/pxeboot/vmlinuz
initrd http://{{ httpserver }}/redhat8/images/pxeboot/initrd.img
append auto=true devfs=nomount method=http://{{ httpserver }}/redhat8/ ks=http://{{ httpserver }}/ks.cfg?osid=centos7


# Dell Update CD (R630)
# Aka DTK = Dell Deployment Toolkit (File isolinux/VER_INFO gives DTK version, e.g. DTK_VERSION_STRING="6.3.0")
# DSA = DellOpenManage Server Assistant
# Lot of info on kernel options in ISO image: isolinux/isolinux.cfg (Should be applicable for current CD)
# By certain files in there, the ISO seems to be still (as of 2020) be based on RedHat or GCC 4.X: less /isomnt/dell_m640/isolinux/implantisomd5
# Does not work (!) | grep -iP 'red\s?hat' see (GNU) 4.8.5 20150623 (Red Hat 4.8.5-39) /usr/lib/gcc/x86_64-redhat-linux/4.8.5/
# Dirs:
# - repository/ - Update packages (*.BIN, all "POSIX shell script text executable" invcol.sign, Catalog.xml)
# - drm_files/ - Contains e.g. the apply_bundles.sh script
# There's conflicting info whether share_location=IP:/path should contain drm_files and if share_script=PATH should contain it (Only one should)
# See: https://www.dell.com/support/article/us/en/04/sln296511/update-poweredge-servers-with-platform-specific-bootable-iso?lang=en#1
# https://dl.dell.com/FOLDER05876647M/1/PER630_BOOTABLE_19.10.00.99.iso
# https://www.dell.com/community/Dell-OpenManage-Essentials/Cross-Post-PXE-Boot-into-OME/td-p/4736261
# https://www.dell.com/community/Systems-Management-General/Can-Linux-DTK-6-10-be-made-to-uEFI-PXE-boot/td-p/6067295
# http://lists.us.dell.com/pipermail/linux-poweredge/2010-March/041629.html
# https://www.aglt2.org/wiki/bin/view/AGLT2/Dell/DellDeploymentToolkit
# https://forums.fogproject.org/topic/9974/booting-iso-issue-mount-dev-cdrom/14
# Google: "dell update ramdisk_size share_type share_location"
# https://www.mail-archive.com/search?l=linux-poweredge@dell.com&q=subject:%22Re%5C%3A+Dell+DTK+bootable+iso+or+pxe+images+with+Cobbler%22&o=newest&f=1
# https://fedorahosted.org/cobbler/wiki/HowToPxeAnyLiveCd
# https://www.dell.com/downloads/global/power/ps1q06-20050170-gujarathi-oe.pdf - PXE Booting DTK - 2006 Whitepaper on DSA / Dell updates CD:s and PXE
# 
# # Using NFS with DTK
# 
# - Install NFS: Debian: nfs-kernel-server, RH: nfs-utils
# - Add to /etc/exports: /isomnt/dell_m640 *(ro,no_root_squash,sync,no_subtree_check,insecure)
# - Consider PDF Whitepaper PXE Instructions:
#   - Stage3_type=nfs Stage3_opts=nolock Stage3_source={{{ nfsserver }}}:/isomnt/dell_m640/
# Warning: dracut-initqueue - starting timeout scripts   (repeats)
# Could not boot
# Warning: /dev/disk/by-label/CDROM does not exist
# Warning: /dev/mapper/live-rw does not exist
# Generating "/run/init/rdsosreport.txt"
# Type journalctl to view system logs
# Also...
# 
# See 'systemctl status initrd-switch-root.service' for details
# /sysroot does not seem to be an OS tree. os-release file is missing. # Has only /var
# Mounting update binaries (*.BIN) dir for update. Possibly max 3 (nested) mounts (sudo mkdir /mnt2 /mnt3).
# sudo mount 10.85.233.180:/isomnt/dell_m640/ /mnt; sudo mount  /mnt/LiveOS/squashfs.img /mnt2 ; sudo mount /mnt2/LiveOS/ext3fs.img /mnt3
# Run update: cd /mnt/repository/; ./iDRAC-with-Lifecycle-Controller_Firmware_369M3_LN_4.20.20.20_A00.BIN

# label dell_r630
# menu label Dell R630 Update
label dell_m640
menu label Dell M640 Update
kernel http://{{ httpserver }}/dell_m640/isolinux/SA.1
initrd http://{{ httpserver }}/dell_m640/isolinux/SA.2
# DEBUG=0 quiet ... Also: loglevel=1
# Share types seen/used: cdrom,nfs,tftp,smbfs (Also http is made to be supported by SA.2(initrd file): bin/start-stage3.sh with addition)
# append initrd=http://{{ httpserver }}/dell_m640/isolinux/SA.2 ramdisk_size=72399 Stage3_type=cdrom DEBUG=0 quiet BUILD=955 vmalloc=256M share_type=nfs share_location={{ nfsserver }}:/isomnt/dell_m640/drm_files share_script=apply_bundles.sh share_opts=nolock selinux=0
append ramdisk_size=72399 root=live:CDLABEL=CDROM rootfstype=auto  rd.live.image  rd.writable.fsimg rd.md=0 rd.dm=0 Stage3_type=CDROM DEBUG=0  BUILD=0 vmalloc=256M share_type=nfs share_location={{ nfsserver }}:/isomnt/dell_m640/ share_script=drm_files/apply_bundles.sh share_opts=nolock selinux=0

# OpenSuse ISO Install (and autoinst.xml, also called AutoYaST control files (control-files/) ?
# There's also linuxrc key-value based text (non-XML) format
# that can be either separate file or embedded into XML (In a <![CDATA[ ... ]]> section).
# In linuxrc kw param autoyast=http://.../profiles/ tells the location of XML file(s))
# https://lizards.opensuse.org/2014/01/29/network-boot-live-iso/
# https://doc.opensuse.org/projects/YaST/SLES11/autoinstall/invoking_autoinst.html
# https://doc.opensuse.org/projects/autoyast/ - Good detailed doc on autoyast
# https://en.opensuse.org/SDB:PXE_boot_installation
# http://mirror.sfo12.us.leaseweb.net/opensuse/tumbleweed/iso/openSUSE-Tumbleweed-NET-x86_64-Snapshot20191221-Media.iso
# https://documentation.suse.com/sles/12-SP4/html/SLES-all/Invoking.html
# Here we should use:
# - autoyast=http://{{ httpserver }}/ w. linuxrc containing net config
# - autoyast2=http://{{ httpserver }}/ for linuxrc auto net config (See above link)
# https://documentation.suse.com/sles/11-SP4/html/SLES-all/cha-deployment-autoinst.html
# Note with comprehensive ISO the install here should be:
# - install=http://{{ httpserver }}/install/suse-enterprise/
# - Do not use inet source install=http://download.opensuse.org/factory/repo/oss/
# Note: top dir (on ISO) varies between Sles and Opensuse
# https://github.com/digital-wonderland/packer-templates/blob/master/openSUSE-13.1_x86_64/http/autoinst.xml
# OpenSUSE Leap and TW have packages in /x86_64/, /noarch/ and metadata in /repodata/
# https://doc.opensuse.org/projects/autoyast/
##label opensuse_tw_64
##menu label OpenSUSE Thumbleweed 64 bit Mini/Net (Auto-Install)
##kernel http://{{ httpserver }}/opensuse_tw_64/boot/x86_64/loader/linux
##initrd http://{{ httpserver }}/opensuse_tw_64/boot/x86_64/loader/initrd
# EXAMPLE: append initrd=boot/initrd-life64 isofrom_device=nfs:10.0.0.254:/srv/nfs/ isofrom_system=/openSUSE-Edu-li-f-e.x86_64-42.1.1.iso
# ALT:  http://download.opensuse.org/tumbleweed/repo/oss/
# Certified to Boot with efi64/syslinux.efi
##append showopts textmode=1 install=http://{{ httpserver }}/opensuse_tw_64/ autoyast2=http://{{ httpserver }}/autoinst.xml

label opensuse15_man
menu label OpenSUSE 15.2 Leap (DVD, Manual Install)
kernel http://{{ httpserver }}/opensuse152/boot/x86_64/loader/linux
initrd http://{{ httpserver }}/opensuse152/boot/x86_64/loader/initrd
append textmode=1 install=http://{{ httpserver }}/opensuse152/

label opensuse15
menu label OpenSUSE 15.2 Leap (DVD, Auto-Install)
kernel http://{{ httpserver }}/opensuse152/boot/x86_64/loader/linux
initrd http://{{ httpserver }}/opensuse152/boot/x86_64/loader/initrd
# console=ttyS0 showopts
append textmode=1 install=http://{{ httpserver }}/opensuse152/ autoyast2=http://{{ httpserver }}/autoinst.xml

# FreeBSD (12) bootonly.iso (Network installer)
# One option includes https://forums.freebsd.org/threads/install-over-pxe.22087/
# NOTAVAIL: http://www.locolomo.org/howto/pxeboot/article.html
# https://wiki.syslinux.org/wiki/index.php?title=MEMDISK - Explanation of memdisk module
# Note: (Ubuntu) memdisk
# - is a linux kernel
# - is located in /usr/lib/syslinux/memdisk
# - comes from "syslinux-common" (dpkg -S /usr/lib/syslinux/memdisk)
# Note: pc-sysinstall is a BSD installer with possible config (-c). Alternative: bsdinstall
# https://github.com/trueos/pc-sysinstall/blob/master/examples/README
# https://www.trueos.org/handbook/advanced.html
# http://web.mit.edu/freebsd/head/usr.sbin/pc-sysinstall/examples/
label freebsd12net
menu label FreeBSD 12 Net ISO Install (by memdisk)
linux /memdisk
#TODO: initrd http://{{ httpserver }}/freebsd12net/freebsd-install/bootonly.iso
initrd http://{{ httpserver }}/bootonly.iso
# Original example from BSD discussion board has BOTH "iso raw". In https://wiki.syslinux.org/wiki/index.php?title=MEMDISK
# these are given as exclusive. mfsBSD ISO works with append iso
# ORIG: append iso raw
append iso

# FreeBSD 12 "PXE Loader 1.00" (boot/pxeboot, Starting the BTX loader)
# Installer: PC-SysInstall ("pc-sysinstall" on ISO, written in shell)
# https://blog.narf.ssji.net/2013/06/pxelinux_openbsd_install/
# The chainloader modules seems to be pxechain.com, but seems to be
# have been renamed to pxechn.c32 (syslinux-common)
# https://www.bsdcan.org/2010/schedule/attachments/142_pc-sysinstall-kris-moore-2010.pdf
# https://forums.freebsd.org/threads/unable-to-pxe-boot-freebsd-install-system.71758/
# - Discusses PXE Problems (e.g. mentions pxechn.c32)
# - Mentions: Now, set DHCP option 17 (path exported on NFS, NFS Root path, no len limit, option root-path "10.0.1.4:/var/tmp/rootfs";)
# Also do: strings /isomnt/freebsd12/boot/pxeboot | less
label freebsd12
menu label FreeBSD 12 (BSD pxeboot)
# kw "pxe" is specific to NBP. "kernel" leads to loading ok, but "Booting kernel/failed: Invalid argument", "boot" - nothing (!).
# linux memdisk; initrd http://.../pxeboot; append raw; starts boot but freezes
kernel pxechn.c32
# Per https://wiki.syslinux.org/wiki/index.php?title=Pxechn.c32 this should work
#initrd http://{{ httpserver }}/freebsd12/boot/pxeboot
# Said to work: APPEND images/FreeBSD12-64/boot/pxeboot (https://forums.freebsd.org/threads/unable-to-pxe-boot-freebsd-install-system.71758/)
# Passes control to bootloader, but it crashes. No extra log items in TFTP
initrd ::pxeboot
# append raw

# Ver 3: https://forums.freebsd.org/threads/pxe-boot-server.74328/
# Note: This is effectively only a slight variant of "kernel pxechn.c32" + "initrd ::pxeboot" ... same kind of crash
#label freebsd12pxe
#menu label FreeBSD 12 with PXE keyword
#pxe pxeboot


# OpenBSD - Seems to vary slightly from PCBSD and FreeBSD
# https://eradman.com/posts/autoinstall-openbsd.html
# Bootloader (NBP): auto_install -> pxeboot.amd64 (Note: symlink is a must filename triggers auto installation !!!)
# Config: $tftproot/etc/boot.conf (stty com0 115200\nset tty com0)
# Recipe (e.g.): 00:1e:c9:4c:69:59-install.conf (http://server/00:1e:c9:4c:69:59-install.conf?path=6.7/amd64)
# URL to autopartitioning template for disklabel = http://172.16.0.1/openbsd-pgdb.disklabel

# mfsBSD
label mfsbsd
menu label mfsBSD (Live)
kernel memdisk
#initrd http://{{ httpserver }}//images/mfsbsd/mfsbsd.gz raw
initrd http://{{ httpserver }}/mfsbsd-12.1-RELEASE-amd64.iso
append iso

# Arch Linux
# archiso_pxe_http hooks in archiso (https://wiki.archlinux.org/index.php/Archiso) it is possible to boot using HTTP (Also: NFS or NBD)
# https://wiki.archlinux.org/index.php/PXE
# https://www.archlinux.org/download/
# Note arch 2020 Changes kernel from arch/boot/x86_64/vmlinuz to arch/boot/x86_64/vmlinuz-linux
# https://www.forbes.com/sites/jasonevangelho/2019/06/10/arch-linux-os-challenge-2-alternatives-install-gui-script-easy/#3089c7ef4d94
#   https://github.com/picodotdev/alis - Arch Linux Install Script
# Arch Linux Challenge: https://docs.google.com/document/d/1kWQRBDL_N0CImPV5t0W2xj7bsAFcZOLmRsf-kX-eR9M/edit#heading=h.kk1966kbedef
# See also: https://github.com/wrzlbrmft/arch-install
# INITRD also allowed instead of append initrd=. Allows multiple vals per https://wiki.archlinux.org/index.php/PXE
# What is /archlinux/arch/boot/x86_64/initramfs-linux.img ?
# Fixed "_" to "-" in intel-ucode.img, amd-ucode.img and x86_64/archiso.img => x86_64/initramfs-linux.img
label archlinux
menu label Arch Linux (Live Console, No Auto Install)
kernel http://{{ httpserver }}/archlinux/arch/boot/x86_64/vmlinuz-linux
initrd http://{{ httpserver }}/archlinux/arch/boot/intel-ucode.img,http://{{ httpserver }}/archlinux/arch/boot/amd-ucode.img,http://{{ httpserver }}/archlinux/arch/boot/x86_64/initramfs-linux.img
# initrd=http://{{ httpserver }}/archlinux/arch/boot/x86_64/initramfs-linux.img
append archisobasedir=arch archiso_http_srv=http://{{ httpserver }}/archlinux/
sysappend 3

# Same as above, but has script=... with alis installer run wrapper (gotten from Linetboot)
label archlinux_auto
menu label Arch Linux (Full Auto Install)
kernel http://{{ httpserver }}/archlinux/arch/boot/x86_64/vmlinuz-linux
initrd http://{{ httpserver }}/archlinux/arch/boot/intel-ucode.img,http://{{ httpserver }}/archlinux/arch/boot/amd-ucode.img,http://{{ httpserver }}/archlinux/arch/boot/x86_64/initramfs-linux.img
append archisobasedir=arch archiso_http_srv=http://{{ httpserver }}/archlinux/ script=http://{{ httpserver }}/scripts/arch_alis_run.sh
sysappend 3

# FreeDOS
# http://www.ibiblio.org/pub/micro/pc-stuff/freedos/files/distributions/
#   - 1.1/fd11src.iso
#   - 1.2/FD12CD.iso
label freedos1
menu label FreeDOS 1.0 (Live)
kernel /memdisk
append initrd=http://{{ httpserver }}/freedos1/fdboot.img

# Diskless client
# https://www.kernel.org/doc/Documentation/filesystems/nfs/nfsroot.txt
# - Google: ubuntu 18 diskless client
# https://help.ubuntu.com/community/DisklessUbuntuHowto
# https://unix.stackexchange.com/questions/238999/how-do-you-add-a-virtual-network-ip-address-from-the-kernel-command-line
# https://github.com/torvalds/linux/blob/master/net/ipv4/ipconfig.c#L1614
# https://www.cleanwinner.com/2019/10/19/setting-up-a-server-for-diskless-clients-using-ubutnu-18-04lts-server/
# https://www.hiroom2.com/2017/07/02/ubuntu-1604-pxeboot-thin-client-nfs-en/
# TODO (rsync support hard-links ?):
# - Root-Part:
#   - Hard-linked (h.l farms): /bin,/boot,/dev, /etc (DHCP), /lib, /lib32, /lib64, /libx32/, /run, /sbin
#   - Empty-single-dir Stubs: /cdrom, /home, lost+found, /media/, /mnt, /opt, /proc, /srv, /sys, /tmp, /usr,
#     (Different content may be mounted by diffwerent clients ?)
#   - Empty-dirtree: /var
# - Mount existing: /usr from sample w-s read-only, /home from homedir server (autofs), 
# - Actual final (?) kernel+initrd on NFS will be vmlinuz and /initrd.img
# - Modify: /etc/kernel/postinst.d/zz-update-grub, remove exec update-grub
# - Test Kernel CL ip=bootp or rarp
# - Possibly use: mkinitramfs (as advised in DisklessUbuntuHowto)
#label diskless
#menu label Diskless Ubuntu18 Client
#kernel vmlinuz
#append initrd=/initrd.img root=/dev/nfs nfsroot={{ nfsserver }}:/nfsroot/client-01 ip=dhcp rw

# https://serverfault.com/questions/644793/what-are-the-attributes-required-by-the-component-element-in-windows-unatten
# https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2013/ms125692(v=vs.121)?redirectedfrom=MSDN
# Windows ISO (originally with embedded Autounattend.xml recipe, There's a sample Autounattend.xml template in tmpl/)
# See FreeBSD Boot for example on ISO based boot
label win2019
menu label Windows Server 2019
linux /memdisk
# Example of Original 4.9GB Media
#append iso initrd=http://{{ httpserver }}/Win2019_uefi_autoinstall.iso
initrd http://{{ httpserver }}/winpe.iso
append iso
# Not likely the below
#append raw

# iPXE test ipxe.lkrn works
label ipxe
menu label iPXE Chain
linux http://{{ httpserver }}/ipxe.lkrn
# initrd http://{{ httpserver }}/...

# ESXi Installer
# https://docs.vmware.com/en/VMware-vSphere/7.0/com.vmware.esxi.upgrade.doc/GUID-2F0D4696-3681-4C13-9552-5280C6406376.html
# Initial recommended TFTP subdir name format: ESXi-7.x.x-XXXXXX/
# boot.cfg would need to contain
# - TFTP server root relative subdir name for installer binaries (e.g.): prefix=ESXi-7.x.x-xxxxxx often empty
#  (if all from ISO is copied to root of TFTP)
#  - Seems ESXi 7.0 update 2 supports http prefixes (e.g.): prefix=http://192.168.30.6/esxi70u1c
# - Kernel options
#   - Kickstart location: kernelopt=ks=http://{{{ httpserver }}}/esxi-ks.cfg
#   - Other Installer kernel options: kernelopt=cdromBoot runweasel
#   - Note: if ks=http:// given, seems you should eliminate runweasel (and others ?)
# - Also: bootstate=0, title=Loading ESXi Installer, timeout=5, prefix=
# - kernel=tboot.b00 | b.b00, modules=... build=7.0.2-0.0.17630552
# - Modules: '---' delimited string of *.boo, *.v00, *.v01, *.gz
# Note: ISO should have example boot.cfg and mboot.efi (also has mboot.c32 ?)
# If module files (modules=...) are not in root of TFTP, remove all '/' in boot.cfg
# ( sed -i 's/\///g' /var/lib/tftpboot/esxi65u1/boot.cfg )
# Common convention on TFTP dirs (on copying ISO contents to) (e.g.): images/ESXiv6.5/
# https://williamlam.com/2015/10/support-for-uefi-pxe-boot-introduced-in-esxi-6-0.html
# - mboot.efi is on ISO in dir: efi/boot/bootx64.efi (copy to mboot.efi)
# ESXi KS example https://williamlam.com/2015/10/how-to-prompt-for-user-input-during-an-interactive-or-scripted-install-of-esxi.html
# http://patorjk.com/software/taag/#p=display&f=Standard&t=LinetBoot
# https://rudimartinsen.com/2018/03/27/building-a-pxe-boot-environment-for-esxi/
# mboot.c32 => /usr/lib/syslinux/modules/bios/mboot.c32 (ok for use ?)
# https://rudimartinsen.com/2019/02/12/pxe-boot-and-install-esxi-6-7-u1-remember-to-use-correct-boot-cfg-file/
# Good source info for ESXi PXE install: https://rudimartinsen.com/2019/08/07/revisiting-esxi-provisioning/
# Note: VMWare mboot.c32 is 10x bigger and is "COM executable (32-bit COMBOOT, relocatable)"
# (Not: "ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV), dynamically linked, stripped")
# http://www.vstellar.com/2017/07/25/automating-esxi-deployment-using-pxe-boot-and-kickstart/
# https://williamlam.com/2021/03/simplified-nested-esxi-installation-in-esxi-7-0-update-2-using-http-boot-over-virtualefi.html
#  - perform an HTTP Boot given the ESXi bootloader URL
# https://www.vmware.com/pdf/vsp_4_pxe_boot_esxi.pdf
# ks=... parameter can also be given on pxelinux menu append line: ... ks=... (instead of boot.cfg kernelopt=...)
# http://www.routereflector.com/2014/01/unattended-vmware-esxi-installation-via-pxe-boot-and-kickstart/
# Note: pxelinux.0 must come from the same syslinux version used on ESXi ISO.
label esxi
menu label ESXi 7.X Installer
kernel ESXi-7/mboot.c32
append -c ESXi-7/boot.cfg
ipappend 2
