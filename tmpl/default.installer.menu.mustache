# Default Installation menu
# Make sure this does not ovewrite anything
# rsync -av default_inst ${TFTP_HOST}:${TFTP_PATH}/pxelinux.cfg/default
# Installer kernel / ramdisk on out-of-box Ubuntu TFTP
# - ubuntu-installer/amd64/linux
# - ubuntu-installer/amd64/initrd.img
# Simple generation of menu file with mustache:
# cat global.conf.json | ./node_modules/mustache/bin/mustache - ./default_inst

#default menu.c32

# Needed *only* for Ubuntu default `ubuntu-installer` based boot file hierarchy (Not if files are
# simply placed in root dir)
#path ubuntu-installer/amd64/boot-screens/
# ???? default ubuntu-installer/amd64/boot-screens/libcom.c32
# Simplified to root
#default ubuntu-installer/amd64/boot-screens/vesamenu.c32
# Removed to prefer logic below
# default vesamenu.c32
# Failed to load COM32 file ubuntu-installer/amd64/boot-screens/stdmenu.c32
#default ubuntu-installer/amd64/boot-screens/stdmenu.c32
# TEMPORARILY DISABLED. Gives grayish / silvery background
#menu background ubuntu-installer/amd64/boot-screens/splash.png
menu title LiNetBoot Tools and Install Menu

prompt 0
## timeout 100
timeout {{{ tftp.menutout }}}
# Declaring Default menuitem makes this boot directly to it (independent of timeout !?)
# OLD: default local
# Templated (w. non-empty):
{{#tftp.menudef}}default {{{ tftp.menudef }}}{{/tftp.menudef}}
{{^tftp.menudef}}default vesamenu.c32{{/tftp.menudef}}

# Note: Moved to using Gparted (0.31.0-1-amd64, Linux 4.15) for kernel
# See: https://gparted.org/download.php
label local
menu label  Boot From Local First Part. (First Disk, sda1)
#kernel http://{{ httpserver }}/vmlinuz
kernel http://{{ httpserver }}/gparted/live/vmlinuz
initrd http://{{ httpserver }}/gparted/live/initrd.img
append root=/dev/sda1

# Same as first menu iten, but second partition
label local2
menu label  Boot From Local Second Part. (First Disk, sda2)
kernel http://{{ httpserver }}/gparted/live/vmlinuz
initrd http://{{ httpserver }}/gparted/live/initrd.img
append root=/dev/sda2


# There are 3 memtest binaries in /boot/: memtest86+.bin  memtest86+.elf and memtest86+_multiboot.bin
# All files get correctly fetched by HTTP, but there are execution
# problems. Esp. Ubuntu memtest binaries do not seem to work. Centos and Gparted memtest binaries DO work.
# Possible problem (.elf): "Booting kernel failed: Invalid argument"
# From internet: Could not boot: Invalid argument, Could not boot image: Invalid argument
# http://omniboot.org/txt/memtest8.pdf
# http://forum.ipxe.org/showthread.php?tid=7937 has memtest.0 link: http://boot.ipxe.org/memtest.0
# Does NOT Boot with efi64/syslinux.efi
label memtest
menu label  Memory Test (memtest86, Live)
# This would be HTTP path
#kernel http://{{ httpserver }}/memtest86+.bin
#kernel http://{{ httpserver }}/memtest86+.elf
#kernel http://{{ httpserver }}/memtest86+_multiboot.bin
#kernel http://{{ httpserver }}/memtest.0
# Centos 6 provided memtest (works!)
#kernel http://{{ httpserver }}/centos6/isolinux/memtest
# Gparted provided memtest (works!)
kernel http://{{ httpserver }}/gparted/live/memtest
# TFTP Path
#kernel memtest86+

# http://www.wonkity.com/~wblock/docs/html/pxe.html
# Comes with Ubuntu (part of syslinux-common)
label hdt
menu label HDT - Hardware Detection tool
kernel hdt.c32

# GpartEd (https://gparted.org/livepxe.php)
# This boot seems to be sometimes (but rarely) failing on Dell D830 with lack of network detection network card support. Works always with Dell servers.
# https://gparted.org/gparted-live-boot-param.php => https://gparted.org/display-doc.php?name=debian-live-config
# nfsopts=vers=3 ? debug=1 httpfs=URL
# config
# live-config.timezone={{ inst.time_zone }} utc=yes
# Certified to Boot with efi64/syslinux.efi
label gparted
menu label GpartEd Live (Ramdisk Netboot)
kernel http://{{ httpserver }}/gparted/live/vmlinuz
initrd http://{{ httpserver }}/gparted/live/initrd.img
append boot=live  components union=overlay username=user noswap noeject ip= vga=788 fetch=http://{{ httpserver }}/gparted/live/filesystem.squashfs keyb=us gl_kbd=us gl_lang=en_US gl_numlk=off gl_batch nolocales

# System Rescue CD (>= 6.X based on Arch: https://www.system-rescue.org/Download/)
# systemrescue-7.00-amd64.iso / systemrescue-8.05-amd64.iso
# - Boot Options: https://www.system-rescue.org/manual/Booting_SystemRescueCd/
# - PXE Bootting: https://www.system-rescue.org/manual/PXE_network_booting/
# NOTE: The ISO image has subdir "sysresccd", so if Lineboot loop mount dir is name "sysresccd/" (isomnt/sysresccd/),
# the sysresccd *should* be duplicated in paths (see below).
label sysresccd
menu label System Rescue CD (Live)
kernel http://{{ httpserver }}/sysresccd/sysresccd/boot/x86_64/vmlinuz
INITRD http://{{ httpserver }}/sysresccd/sysresccd/boot/intel_ucode.img,http://{{ httpserver }}/sysresccd/sysresccd/boot/amd_ucode.img,http://{{ httpserver }}/sysresccd/sysresccd/boot/x86_64/sysresccd.img
# NOT: append initrd=http://{{ httpserver }}/sysresccd/sysresccd copytoram setkmap=us
# archisobasedir should be plainly "sysresccd" (subdir on ISO) and archiso_http_srv should append /sysresccd/ (Lineboot loop mount, under docroot)
APPEND archisobasedir=sysresccd ip=dhcp archiso_http_srv=http://{{{ httpserver }}}/sysresccd/ checksum
SYSAPPEND 3

# Clonezilla Live PXE
# Example almost directly from https://clonezilla.org/livepxe.php
# ...but converted to Linetboot HTTP context.
# TODO: Convert to current mainstream iso loop mount scheme
# Certified to Boot with efi64/syslinux.efi (net/dhcp problems)
# Removed: quiet
label clonezilla
menu label Clonezilla Live (Ramdisk Netboot)
kernel http://{{ httpserver }}/clonezilla/live/vmlinuz
initrd http://{{ httpserver }}/clonezilla/live/initrd.img
# nolocales
append boot=live username=user union=overlay config components  noswap edd=on nomodeset nodmraid locales= keyboard-layouts=us ocs_live_run="ocs-live-general" ocs_live_extra_param="" ocs_live_batch=no net.ifnames=0 nosplash noprompt fetch=http://{{ httpserver }}/clonezilla/live/filesystem.squashfs

# DBAN (https://sourceforge.net/projects/dban/files/dban/dban-2.3.0/)
# This works fine but is too destructive to keep enabled in menu by default.
#label dban
#menu label DBAN Darik's Boot and Nuke (Disk Erase)
#kernel /memdisk
#initrd http://{{ httpserver }}/dban-2.3.0_i586.iso
#append iso

# Digabi OS / Abitti Exam Environment (file is a multi-partition image)
# file koe.img: DOS/MBR boot sector; partition 1 ... partition 4 ... (all info given in "sectors")
# bad file number
# https://serverfault.com/questions/841493/pxe-booting-img-and-dd-images
# Try also append harddisk
#label abitti
#menu label Digabi OS / Abitti Exam Environment
#kernel /memdisk
#initrd http://{{ httpserver }}/koe.img
##append raw
##sysappend 3

# Puppy (Debian style kernel/initrd names, but in root of ISO image)
# https://tenbaht.github.io/posts/pxe-booting-puppy-linux/
# https://oldforum.puppylinux.com/viewtopic.php?p=488348#488348
# https://docs.google.com/document/d/1bkMJ-2wjAAC8HVZZTZBFxBELbojoGctLMg27KazqvRw/edit?hl=en
# Where is mknetboot.sh ? https://forum.puppylinux.com/viewtopic.php?t=5904
# Must re-package initrd.gz (on ISO root) to include *.sfs (squash-fs, on ISO root):
# zcat /a/path/initrd.gz | cpio -i
# cp -av /mnt/*.sfs . ; find . | cpio -o -H newc | gzip -9 > initrd_fossapup.gz
# cp initrd_fossapup.gz /isomnt/initrd_fossapup.gz
label fossapup
menu label Puppy Fossa (64 bit, Live)
kernel http://{{ httpserver }}/fossapup/vmlinuz
#initrd http://{{ httpserver }}/fossapup/initrd.gz
initrd http://{{ httpserver }}/initrd_fossapup.gz
# From (2011): https://oldforum.puppylinux.com/viewtopic.php?t=63718&start=15
#append PDEV1=rootfs


# TinyCore Linux - Also requires re-package of initrd (core.gz)
# Sequence of disassebling, modding and assembling initrd back to working shape (TODO: as script):
# `
# zcat /isomnt/tinycore/boot/core.gz | sudo cpio -i
# # ... Will get a lot of: cpio: dev/tty: Cannot mknod: Operation not permitted (Solution: Add sudo to cpio
# # add cde/optional/*.tcz squashFS files to ramdisk-root relative path usr/local/share/install-base
# sudo mkdir -p ./usr/local/share/install-base
# sudo cp -p /isomnt/tinycore/cde/optional/*tcz /usr/local/tmp/tc/usr/local/share/install-base
# # Tweak /etc/profile ...
# echo -e "tce-load -i /usr/local/share/install-base/*tcz\ntce-load -w -i firefox-esr.tcz\nstartx" | sudo tee -a etc/profile
# 
# # chdir to new assy dir and Re-assemble:
# find . | cpio -H newc -o | gzip -9 > /tmp/core_tinycore.gz
# ```
# - https://www.linux-magazine.com/Issues/2020/230/PXE-Boot-with-TinyCore
label      tinycore13
menu label TinyCore (32-bit, Live)
kernel http://{{ httpserver }}/tinycore/boot/vmlinuz
#initrd http://{{ httpserver }}/tinycore/boot/core.gz
initrd http://{{ httpserver }}/core_tinycore.gz

# Debian MATE. Boots up to installer, but installer obscesses about CD/DVD being present (!)
# Need preseed like basic Ubuntu desktop ? e.g. boot=casper live-media-path=
#label debian10mate
#menu label Debian 10 MATE Live
#kernel http://{{ httpserver }}/debian10mate/d-i/vmlinuz
#initrd http://{{ httpserver }}/debian10mate/d-i/initrd.gz
#append interface=auto

# TODO: Debian 8 Jessie

# TODO: Debian 9 Stretch
# Per Erik Debian 9 can PXE directly from ISO w/o netboot.tar.gz

# Debian 10 Buster
# # Debian - General
# Note: Debian calls PXE booting "netboot" and term PXE appears practically in none of Debian documentation.
# Like with many other distros, the kernel used has to be perfect version match to Package content as some packages
# are (possibly) kernel modules.
# Root for different distro versions (e.g. 8,9,10): http://ftp.us.debian.org/debian/dists/
# See: https://www.debian.org/distrib/netinst
# For cleanest and most supported Debian PXE boot we need (try replace distro name for your distro, e.g. "stretch"
# these 2 are usually alwasy side-by-side in same website directory):
# - http://http.us.debian.org/debian/dists/buster/main/installer-amd64/current/images/netboot/netboot.tar.gz (~35MB) OR 
# - http://http.us.debian.org/debian/dists/buster/main/installer-amd64/current/images/netboot/mini.iso - netboot installer (~48MB)
# 
# ## Unpacking netboot.tar.gz
# Example for Debian 10/Buster
# ```
# sudo mkdir /isomnt/debian10net; cd /isomnt/debian10net
# wget http://http.us.debian.org/debian/dists/buster/main/installer-amd64/current/images/netboot/netboot.tar.gz
# sudo tar zxvf netboot.tar.gz
# ```
label debian10
menu label Debian 10 Buster (Full Automated / WIP)
# These paths are valid for (e.g) debian-10.7.0-amd64-DVD-1.iso, debian-10.4.0-amd64-DVD-1.iso (both ~3.9GB)
# kernel http://{{ httpserver }}/debian10/install.amd/vmlinuz
# initrd http://{{ httpserver }}/debian10/install.amd/initrd.gz
# Paths for netboot.tar.gz (Unpackaged with instructions above)
kernel http://{{ httpserver }}/debian10net/debian-installer/amd64/linux
initrd http://{{ httpserver }}/debian10net/debian-installer/amd64/initrd.gz
# initrd http://{{ httpserver }}/debian1070-installer/initrd.gz
append priority=critical auto=true interface=auto ipv6.disable=1 url=http://{{ httpserver }}/preseed.cfg?osid=debian10

# Ubuntu 18 Desktop
# https://askubuntu.com/questions/1069907/why-is-it-not-possible-to-pxe-boot-ubuntu-desktop-editions
# https://askubuntu.com/questions/1029017/pxe-boot-of-18-04-iso
# https://www.tecmint.com/install-ubuntu-via-pxe-server-using-local-dvd-sources/ - How to Install Ubuntu via PXE Server Using Local DVD Sources (THE Solution for booting Ubu 18 DT with PXE)
# See also (ISO image): boot/grub/loopback.cfg
# https://www.vercot.com/~serva/an/NonWindowsPXE3.html
# https://askubuntu.com/questions/1029017/pxe-boot-of-18-04-iso - Hints on NFS based boot
# https://help.ubuntu.com/community/DisklessUbuntuHowto - No info on HTTP
# https://askubuntu.com/questions/1125792/how-do-i-set-up-pxe-boot-to-use-preseed - Hint on using live-installer/net-image directly on kernel CL
# - https://jphein.com/editing-the-pxe-boot-menu-using-ubuntu-18-04-ltsp/ - Preseed suggestions
# https://netboot.xyz/booting/tftp/
# https://www.linuxquestions.org/questions/slackware-14/initramfs-unable-to-find-a-medium-containing-a-live-file-system-4175595144/ - Misc discussion
# https://github.com/benhylau/pi-pxe-server/issues/1
# https://www.golinuxcloud.com/extract-initramfs-cpio-premature-end-archive/ - Diging into CPIO archives
# https://bugs.launchpad.net/ubuntu/+source/cloud-initramfs-tools/+bug/1761573 Boot problems
# https://www.kernel.org/doc/html/latest/admin-guide/initrd.html - Initrd mechanics
# https://www.cyberciti.biz/tips/10-boot-time-parameters-you-should-know-about-the-linux-kernel.html
# https://wiki.ubuntu.com/LiveCDNetboot - Ubuntu Desktop Live boot instructions
label ubuntu18dt32
menu label Ubuntu MATE 18 Desktop (32bit, Live)
kernel http://{{ httpserver }}/ubuntu18dt32/casper/vmlinuz
initrd http://{{ httpserver }}/ubuntu18dt32/casper/initrd
# fetch=http://{{ httpserver }}/ubuntu18dt32/casper/filesystem.squashfs toram 
# url=http://{{ httpserver }}/ubuntu18dt32/preseed/ubuntu-mate.seed
# 1) Working config for NFS dependent setup (Mounts NFS server:/ubu/inst/root under /cdrom)
append boot=casper netboot=nfs nfsroot={{ nfsserver }}:/isomnt/ubuntu18dt32/ ip=dhcp toram
# 2) HTTP Only (Use preseed: /preseed.desktop.cfg which contains a "redirect url"
# (d-i live-installer/net-image installer directive) for FS image casper/filesystem.squashfs)
# - ip: Recommended: ip=dhcp (Also: ip=append, ip=frommedia)
# - boot=casper seems to be needed (Although this causes: stdin: Not a typewriter and "unable to find medium containing a live file system")
# - Use http://{{ httpserver }} or relative-only ?
# - Other suggested vga=788 . vga=normal ? auto=true ? drop boot=casper (after initrd). 
# - Consider stripping "toram" (after ip=dhcp) for memory usage reasons (for NFS-way noram works, but filesystem.squashfs is missing from process). To ram may also be form (w. live-media-path for Slackware): live-media-path toram=filesystem.squashfs
# - Additional suggested: ipv6.disable=1 systemd.mask=tmp.mount (Simply:) ro.
# - Addl (1125792 above): ramdisk_size=16432 root=/dev/rd/0 (Note: some of these failed w. Q author)
# - Eliminate indirection by:
#   - Remove preseed URL: url=...   url=http://{{ httpserver }}/preseed.desktop.cfg
#   - Add: live-installer/net-image=http://{{ httpserver }}/ubuntu18dt32/casper/filesystem.squashfs
#   - May need to be added: ramdisk_size=16432 root=/dev/rd/0 rw
# 
# append initrd=http://{{ httpserver }}/ubuntu18dt32/casper/initrd boot=casper live-installer/net-image=http://{{ httpserver }}/ubuntu18dt32/casper/filesystem.squashfs ip=dhcp toram ipv6.disable=1
# 3) Live media path OR toram=...
# /casper or /casper/filesystem.squashfs (or permutations with http://{{ httpserver }}/ubuntu18dt32/casper/filesystem.squashfs
# Causes: run-init: current directory on the same filesystem as the root: error 0
# Try possibly similar to: root=squash:http://192.168.9.10:5248/images/ubuntu/amd64/ga-18.04/bionic/daily/squashfs
# append initrd=http://{{ httpserver }}/ubuntu18dt32/casper/initrd boot=casper live-media-path=http://{{ httpserver }}/ubuntu18dt32/casper/ debug ip=dhcp toram=filesystem.squashfs ipv6.disable=1 vga=normal fb=false root=/dev/rd/0

label ubuntu18dt
menu label Ubuntu MATE 18 Desktop (64bit, Live)
kernel http://{{ httpserver }}/ubuntu18dt/casper/vmlinuz
initrd http://{{ httpserver }}/ubuntu18dt/casper/initrd
append boot=casper netboot=nfs nfsroot={{ nfsserver }}:/isomnt/ubuntu18dt/ ip=dhcp toram

# MATE 20.04 Conservative config, mimick 18.X Working NFS install
label ubuntu20dt
menu label Ubuntu MATE 20 Desktop (64bit, Live)
kernel http://{{ httpserver }}/ubuntu20dt/casper/vmlinuz
initrd http://{{ httpserver }}/ubuntu20dt/casper/initrd
append boot=casper netboot=nfs nfsroot={{ nfsserver }}:/isomnt/ubuntu20dt/ debug ip=dhcp toram

label ubuntu22dt
menu label Ubuntu MATE 22 Desktop (64bit, Live)
kernel http://{{ httpserver }}/ubuntu22dt/casper/vmlinuz
initrd http://{{ httpserver }}/ubuntu22dt/casper/initrd
append boot=casper netboot=nfs nfsroot={{ nfsserver }}:/isomnt/ubuntu22dt/ debug ip=dhcp toram

# Ubuntu kickstart DISABLED, waiting for Centos Install
# label localinst_ks
# menu label Installer Boot - Kickstart (First Disk ignored)
# kernel http://{{ httpserver }}/linux
# #kernel ubuntu-installer/amd64/linux
# # TODO: Add: auto=true 
# append initrd=http://{{ httpserver }}/initrd.gz -- ks=http://192.168.1.141/ks.cfg
# #append initrd=ubuntu-installer/amd64/initrd.gz root=/dev/sda1

# Ubuntu Server 20.04 w. Subiquity based "modern" installer
# Default image relies on completely new subiquity installer ("live-installer") and YAML autoinstall mechanism (non-preseed).
# Seems to not work without special kernel options on 2GB RAM machines
# - No settings: ("79% 717 MB ... (initramfs) wget: short write: No space left on device")
# - root=/dev/ram0 ramdisk_size=1500000 Freeze at "System time synchronized"
# - root=/dev/ram0 ramdisk_size=1650000 At time settings: Out of memory (cloud-init), but continues for ~ 10 lines
# https://ubuntu.com/server/docs/install/autoinstall-quickstart
# https://askubuntu.com/questions/1235723/automated-20-04-server-installation-using-pxe-and-live-server-image
# OLDER: https://wiki.ubuntu.com/UEFI/PXE-netboot-install
# See also next boot item for preseed based "legacy" installer.
# Discussed on: https://discourse.ubuntu.com/t/netbooting-the-live-server-installer/14510/9
# Seems file / URL path downloaded is "user-data"
# Needs also file (in same path): "meta-data: instance-id: focal-autoinstall
# Seems loop-mounted dir is not accepted url=... must be an ISO file. Note: must have kernel param autoinstall.
label ubuntu2004
menu label Install Ubuntu 20.04 Server subiquity/Live (TODO: Automated)
kernel http://{{ httpserver }}/ubuntu20/casper/vmlinuz
initrd http://{{ httpserver }}/ubuntu20/casper/initrd
append ip=dhcp url=http://{{ httpserver }}/ubuntu-20.04-live-server-amd64.iso autoinstall ds=nocloud-net;s=http://{{ httpserver }}/ root=/dev/ram0 ramdisk_size=1600000
# NONEED(?): priority=critical auto=true interface=auto ipv6.disable=1
# MAY NEED: root=/dev/ram0 ramdisk_size=1500000
# Also append syntax: ds=nocloud-net;local-hostname=server01;seedfrom=http://{{ httpserver }}/
# "s" seems to be alias for "seedfrom"

# Ubuntu 20.04 Legacy (preseed) installer
# http://archive.ubuntu.com/ubuntu/dists/focal/main/installer-amd64/current/legacy-images/netboot/mini.iso
# http://cdimage.ubuntu.com/ubuntu-legacy-server/releases/20.04/release/ubuntu-20.04.1-legacy-server-amd64.iso <= USE THIS for preseed
label ubuntu2004legacy
menu label Install Ubuntu 20.04 Server - legacy preseed (Automated)
kernel http://{{ httpserver }}/ubuntu20legacy/install/netboot/ubuntu-installer/amd64/linux
initrd http://{{ httpserver }}/ubuntu20legacy/install/netboot/ubuntu-installer/amd64/initrd.gz
append priority=critical auto=true interface=auto ipv6.disable=1 url=http://{{ httpserver }}/preseed.cfg?osid=ubuntu20

label ubuntu1804
menu label Install Ubuntu 18.04 Server (Full Automated)
kernel http://{{ httpserver }}/ubuntu18/install/netboot/ubuntu-installer/amd64/linux
initrd http://{{ httpserver }}/ubuntu18/install/netboot/ubuntu-installer/amd64/initrd.gz
# Must have: "auto=true" (Not only "auto", which may be sufficient for older distros)
# --
# priority:
# - Default, works best for prod: priority=critical (works alternate to hostname...,domain... below)
# - debconf/priority=high
# - Debugging install and show (menu) components: install debconf/priority=medium 
# hostname=unassigned-hostname domain=unassigned-domain. DEBCONF_DEBUG=5
# Skip tasksel: tasksel:tasksel/first=""
append priority=critical auto=true interface=auto ipv6.disable=1 url=http://{{ httpserver }}/preseed.cfg?osid=ubuntu18
# (First Disk ignored)
#append initrd=ubuntu-installer/amd64/initrd.gz root=/dev/sda1

# https://superuser.com/questions/1247353/ubuntu-16-04-pxe-netboot-preseed-install
# locale=en_US.UTF-8 console-setup/ask_detect=false console-setup/layoutcode=us keyboard-configuration/layoutcode=us
# mirror/http/mirror=ca.archive.ubuntu.com netcfg/get_hostname=
# preseed/interactive=false
label ubuntu1604
menu label Install Ubuntu 16.04 Server (Full Automated)
kernel http://{{ httpserver }}/ubuntu16/install/netboot/ubuntu-installer/amd64/linux
initrd http://{{ httpserver }}/ubuntu16/install/netboot/ubuntu-installer/amd64/initrd.gz
append priority=critical auto=true interface=auto ipv6.disable url=http://{{ httpserver }}/preseed.cfg?osid=ubuntu16 preseed/interactive=false

label ubuntu1404
menu label Install Ubuntu 14.04 Server (Full Automated)
kernel http://{{ httpserver }}/ubuntu14/install/netboot/ubuntu-installer/amd64/linux
initrd http://{{ httpserver }}/ubuntu14/install/netboot/ubuntu-installer/amd64/initrd.gz
#kernel ubuntu-installer/amd64/linux
# Must have: auto=true 
# --
# priority=critical (works alternate to hostname...,domain... below) Another: debconf/priority=high
# hostname=unassigned-hostname domain=unassigned-domain
# Seems Ubu14 should use live-installer/net-image (https://ubuntuforums.org/showthread.php?t=2228972)
# 
append priority=critical auto=true interface=auto DEBCONF_DEBUG=5 ipv6.disable=1 url=http://{{ httpserver }}/preseed.cfg?osid=ubuntu14 live-installer/net-image=http://{{ httpserver }}/ubuntu14/install/filesystem.squashfs
# (First Disk ignored)
#append initrd=ubuntu-installer/amd64/initrd.gz root=/dev/sda1

# Centos 8
label centos8
menu label CentOS 8.2 (Full Automated)
kernel http://{{ httpserver }}/centos8/images/pxeboot/vmlinuz
initrd http://{{ httpserver }}/centos8/images/pxeboot/initrd.img
append auto=true devfs=nomount method=http://{{ httpserver }}/centos8/ ks=http://{{ httpserver }}/ks.cfg?osid=centos7

# Centos 7
# See: https://www.tecmint.com/install-pxe-network-boot-server-in-centos-7/
# https://projects.theforeman.org/issues/4506 .. on  ksdevice=bootif network kssendmac
# http://forum.ipxe.org/showthread.php?tid=5445
# https://docs.oracle.com/cd/E92593_01/E64608/html/ol-bootcfg-file.html - Info about UEFI Based PXE clients menu format
label centos7
menu label Install CentOS 7 (Full Automated)
# method=http://mirror.centos.org/centos/7/os/x86_64/
# Note: Centos 7 says: 'method=' is deprecated. Using 'repo=http://...' instead. --noipv6 should be supported.
# RH 6 supports param "text" (?)
kernel http://{{ httpserver }}/centos7/images/pxeboot/vmlinuz
initrd http://{{ httpserver }}/centos7/images/pxeboot/initrd.img
# Change "repo=..." => "method=..."
# Centos doc: inst.ks= ?
# NOTE: Cannot use method=http://mirror.centos.org/centos/7/os/x86_64/ as mixed version components may result.
# Use method=http://{{ httpserver }}/centos7/ with big-enough (not *mini* or *net*) ISO to have all needed pkgs available.
append auto=true devfs=nomount method=http://{{ httpserver }}/centos7/ ks=http://{{ httpserver }}/ks.cfg?osid=centos7

# ISO: CentOS-6.10-x86_64-netinstall.iso (at ... http://isoredirect.centos.org/centos/6/isos/x86_64/)
# Mirror: http://mirrors.sonic.net/centos/6.10/os/x86_64/ http://mirror.centos.org/centos/6.10/os/x86_64/
label centos6
menu label Install CentOS 6 (Full Automated)
kernel http://{{ httpserver }}/centos6/images/pxeboot/vmlinuz
initrd http://{{ httpserver }}/centos6/images/pxeboot/initrd.img
# devfs=nomount
# method=http://{{ httpserver }}/centos6
# Note: Is auto=true hampering this
append auto=true devfs=nomount ks=http://{{ httpserver }}/ks.cfg?osid=centos6

# ## RedHat 8
# Practically identical to centos7
label redhat8
menu label RedHat 8.X (TODO: Full Automated)
kernel http://{{ httpserver }}/redhat8/images/pxeboot/vmlinuz
initrd http://{{ httpserver }}/redhat8/images/pxeboot/initrd.img
append auto=true devfs=nomount method=http://{{ httpserver }}/redhat8/ ks=http://{{ httpserver }}/ks.cfg?osid=centos7


# Dell Update CD (R630)
# Aka DTK = Dell Deployment Toolkit (File isolinux/VER_INFO gives DTK version, e.g. DTK_VERSION_STRING="6.3.0")
# DSA = DellOpenManage Server Assistant
# Lot of info on kernel options in ISO image: isolinux/isolinux.cfg (Should be applicable for current CD)
# By certain files in there, the ISO seems to be still (as of 2020) be based on RedHat or GCC 4.X: less /isomnt/dell_m640/isolinux/implantisomd5
# Does not work (!) | grep -iP 'red\s?hat' see (GNU) 4.8.5 20150623 (Red Hat 4.8.5-39) /usr/lib/gcc/x86_64-redhat-linux/4.8.5/
# Dirs:
# - repository/ - Update packages (*.BIN, all "POSIX shell script text executable" invcol.sign, Catalog.xml)
# - drm_files/ - Contains e.g. the apply_bundles.sh script
# There's conflicting info whether share_location=IP:/path should contain drm_files and if share_script=PATH should contain it (Only one should)
# See: https://www.dell.com/support/article/us/en/04/sln296511/update-poweredge-servers-with-platform-specific-bootable-iso?lang=en#1
# https://dl.dell.com/FOLDER05876647M/1/PER630_BOOTABLE_19.10.00.99.iso
# https://www.dell.com/community/Dell-OpenManage-Essentials/Cross-Post-PXE-Boot-into-OME/td-p/4736261
# https://www.dell.com/community/Systems-Management-General/Can-Linux-DTK-6-10-be-made-to-uEFI-PXE-boot/td-p/6067295
# http://lists.us.dell.com/pipermail/linux-poweredge/2010-March/041629.html
# https://www.aglt2.org/wiki/bin/view/AGLT2/Dell/DellDeploymentToolkit
# https://forums.fogproject.org/topic/9974/booting-iso-issue-mount-dev-cdrom/14
# Google: "dell update ramdisk_size share_type share_location"
# https://www.mail-archive.com/search?l=linux-poweredge@dell.com&q=subject:%22Re%5C%3A+Dell+DTK+bootable+iso+or+pxe+images+with+Cobbler%22&o=newest&f=1
# https://fedorahosted.org/cobbler/wiki/HowToPxeAnyLiveCd
# https://www.dell.com/downloads/global/power/ps1q06-20050170-gujarathi-oe.pdf - PXE Booting DTK - 2006 Whitepaper on DSA / Dell updates CD:s and PXE
# 
# # Using NFS with DTK
# 
# - Install NFS: Debian: nfs-kernel-server, RH: nfs-utils
# - Add to /etc/exports: /isomnt/dell_m640 *(ro,no_root_squash,sync,no_subtree_check,insecure)
# - Consider PDF Whitepaper PXE Instructions:
#   - Stage3_type=nfs Stage3_opts=nolock Stage3_source={{{ nfsserver }}}:/isomnt/dell_m640/
# Warning: dracut-initqueue - starting timeout scripts   (repeats)
# Could not boot
# Warning: /dev/disk/by-label/CDROM does not exist
# Warning: /dev/mapper/live-rw does not exist
# Generating "/run/init/rdsosreport.txt"
# Type journalctl to view system logs
# Also...
# 
# See 'systemctl status initrd-switch-root.service' for details
# /sysroot does not seem to be an OS tree. os-release file is missing. # Has only /var
# Mounting update binaries (*.BIN) dir for update. Possibly max 3 (nested) mounts (sudo mkdir /mnt2 /mnt3).
# sudo mount 10.85.233.180:/isomnt/dell_m640/ /mnt; sudo mount  /mnt/LiveOS/squashfs.img /mnt2 ; sudo mount /mnt2/LiveOS/ext3fs.img /mnt3
# Run update: cd /mnt/repository/; ./iDRAC-with-Lifecycle-Controller_Firmware_369M3_LN_4.20.20.20_A00.BIN

# label dell_r630
# menu label Dell R630 Update
# Dell M640 Seems to (suddenly) work, at least gets to functional shell (with kernel and initrd kept on their own lines ?)
# 85 utils in /bin/. /etc/os-release says: CentOS Linux 7 (Core) dracut-033-568.el7 (Initramfs). Are we still on initrd ?
# Has /run/initramfs/rdsosreport.txt (160360 B.)
# No command df, but mount shows no NFS mounts even if requested on kernel CL.
label dell_m640
menu label Dell M640 Update
kernel http://{{ httpserver }}/dell_m640/isolinux/SA.1
initrd http://{{ httpserver }}/dell_m640/isolinux/SA.2
# DEBUG=0 quiet ... Also: loglevel=1
# Share types seen/used: cdrom,nfs,tftp,smbfs (Also http is made to be supported by SA.2(initrd file): bin/start-stage3.sh with addition)
# append initrd=http://{{ httpserver }}/dell_m640/isolinux/SA.2 ramdisk_size=72399 Stage3_type=cdrom DEBUG=0 quiet BUILD=955 vmalloc=256M share_type=nfs share_location={{ nfsserver }}:/isomnt/dell_m640/drm_files share_script=apply_bundles.sh share_opts=nolock selinux=0
append ramdisk_size=72399 root=live:CDLABEL=CDROM rootfstype=auto  rd.live.image  rd.writable.fsimg rd.md=0 rd.dm=0 Stage3_type=CDROM DEBUG=0  BUILD=0 vmalloc=256M share_type=nfs share_location={{ nfsserver }}:/isomnt/dell_m640/ share_script=drm_files/apply_bundles.sh share_opts=nolock selinux=0

# OpenSuse ISO Install (and autoinst.xml, also called AutoYaST control files (control-files/) ?
# There's also linuxrc key-value based text (non-XML) format
# that can be either separate file or embedded into XML (In a <![CDATA[ ... ]]> section).
# In linuxrc kw param autoyast=http://.../profiles/ tells the location of XML file(s))
# https://lizards.opensuse.org/2014/01/29/network-boot-live-iso/
# https://doc.opensuse.org/projects/YaST/SLES11/autoinstall/invoking_autoinst.html
# https://doc.opensuse.org/projects/autoyast/ - Good detailed doc on autoyast
# https://en.opensuse.org/SDB:PXE_boot_installation
# http://mirror.sfo12.us.leaseweb.net/opensuse/tumbleweed/iso/openSUSE-Tumbleweed-NET-x86_64-Snapshot20191221-Media.iso
# https://documentation.suse.com/sles/12-SP4/html/SLES-all/Invoking.html
# Here we should use:
# - autoyast=http://{{ httpserver }}/ w. linuxrc containing net config
# - autoyast2=http://{{ httpserver }}/ for linuxrc auto net config (See above link)
# https://documentation.suse.com/sles/11-SP4/html/SLES-all/cha-deployment-autoinst.html
# Note with comprehensive ISO the install here should be:
# - install=http://{{ httpserver }}/install/suse-enterprise/
# - Do not use inet source install=http://download.opensuse.org/factory/repo/oss/
# Note: top dir (on ISO) varies between Sles and Opensuse
# https://github.com/digital-wonderland/packer-templates/blob/master/openSUSE-13.1_x86_64/http/autoinst.xml
# OpenSUSE Leap and TW have packages in /x86_64/, /noarch/ and metadata in /repodata/
# https://doc.opensuse.org/projects/autoyast/
##label opensuse_tw_64
##menu label OpenSUSE Thumbleweed 64 bit Mini/Net (Auto-Install)
##kernel http://{{ httpserver }}/opensuse_tw_64/boot/x86_64/loader/linux
##initrd http://{{ httpserver }}/opensuse_tw_64/boot/x86_64/loader/initrd
# EXAMPLE: append initrd=boot/initrd-life64 isofrom_device=nfs:10.0.0.254:/srv/nfs/ isofrom_system=/openSUSE-Edu-li-f-e.x86_64-42.1.1.iso
# ALT:  http://download.opensuse.org/tumbleweed/repo/oss/
# Certified to Boot with efi64/syslinux.efi
##append showopts textmode=1 install=http://{{ httpserver }}/opensuse_tw_64/ autoyast2=http://{{ httpserver }}/autoinst.xml

label opensuse15_man
menu label OpenSUSE 15.2 Leap (DVD, Manual Install)
kernel http://{{ httpserver }}/opensuse152/boot/x86_64/loader/linux
initrd http://{{ httpserver }}/opensuse152/boot/x86_64/loader/initrd
append textmode=1 install=http://{{ httpserver }}/opensuse152/

label opensuse15
menu label OpenSUSE 15.2 Leap (DVD, Auto-Install)
kernel http://{{ httpserver }}/opensuse152/boot/x86_64/loader/linux
initrd http://{{ httpserver }}/opensuse152/boot/x86_64/loader/initrd
# console=ttyS0 showopts
append textmode=1 install=http://{{ httpserver }}/opensuse152/ autoyast2=http://{{ httpserver }}/autoinst.xml

# FreeBSD (12) bootonly.iso (Network installer, boots to console shell and lets launch manual install)
# Sometimes issuing comands in shell or just waiting crashes shell which triggers crash/reboot.
# One option includes https://forums.freebsd.org/threads/install-over-pxe.22087/
# NOTAVAIL: http://www.locolomo.org/howto/pxeboot/article.html
# https://wiki.syslinux.org/wiki/index.php?title=MEMDISK - Explanation of memdisk module
# Note: syslinux/pxelinux memdisk
# - is a linux kernel (by boot protocol)
# - is located in (Ubuntu) /usr/lib/syslinux/memdisk
# - comes from "syslinux-common" (dpkg -S /usr/lib/syslinux/memdisk)
# - "fetch" is a BSD equivalent of wget/curl (e.g. in freebsd12/usr/bin/fetch)
# Note: pc-sysinstall is a BSD installer with possible config (-c). Alternative: bsdinstall
# - https://github.com/trueos/pc-sysinstall/blob/master/examples/README
# - https://www.trueos.org/handbook/advanced.html
# - http://web.mit.edu/freebsd/head/usr.sbin/pc-sysinstall/examples/
# - https://forums.freebsd.org/threads/unattended-installation-of-freebsd.59699/
# - https://www.freebsd.org/cgi/man.cgi?bsdinstall(8) - See subcommands auto, script
# - https://wiki.freebsd.org/BSDInstall
#   - freebsd12/usr/sbin/bsdinstall Shell script (<100 l.)
#     - gets run N-times with subcommand that is utility name in bsdinstall -dir (see below)
#   - freebsd12/usr/libexec/bsdinstall/ - Dir of shell script and ELF install utilities (autopart,adduser,hostname,netconfig,mirrorselect)
# - pc-sysinstall freebsd12/usr/sbin/pc-sysinstall
#   - Shell script, OLD: uses install.cfg as config (2011)
#   - /usr/share/pc-sysinstall/pc-sysinstall.conf
# - https://docs.freebsd.org/en/articles/remote-install/
#  - conf/loader.conf (found boot/loader.conf boot/defaults/loader.conf)
#  - conf/interfaces.conf (Not found on ISO)
#  - conf/rc.conf (found etc/rc.conf, etc/defaults/rc.conf)
#  - /isomnt/freebsd12/usr/freebsd-dist Directory has MANIFEST that lists files
#    (e.g. base.txz) NOT on ISO (Must be in mirrors)
# - FreeBSD ISO has pxeboot in boot/pxeboot
# - https://louwrentius.com/freebsd-101-unattended-install-over-pxe-http-no-nfs.html
#   - Shows use of bsdinstall with /etc/installerconfig
#   - Seems /etc/rc.local gets run on boot and could/should be modded to fetch installerconfig etc.
# - http://wiki.euserv.com/index.php/Manual_Installation_FreeBSD/en
label freebsd12net
menu label FreeBSD 12 Net ISO Install (by memdisk)
linux /memdisk
#TODO: initrd http://{{ httpserver }}/freebsd12net/freebsd-install/bootonly.iso
initrd http://{{ httpserver }}/FreeBSD-12.1-RELEASE-amd64-bootonly.iso
# Original example from BSD discussion board has BOTH "iso raw". In https://wiki.syslinux.org/wiki/index.php?title=MEMDISK
# these are given as exclusive. mfsBSD ISO works with append iso
# ORIG: append iso raw
append iso

# FreeBSD 12 "PXE Loader 1.00" (boot/pxeboot 0fae8c4b43c1f4d69c19617c0af43b28, Starting the BTX loader)
# Installer: PC-SysInstall ("pc-sysinstall" on ISO, written as shell-script)
# https://blog.narf.ssji.net/2013/06/pxelinux_openbsd_install/
# The chainloader modules seems to be pxechain.com, but seems to be
# have been renamed to pxechn.c32 (syslinux-common)
# https://www.bsdcan.org/2010/schedule/attachments/142_pc-sysinstall-kris-moore-2010.pdf
# https://forums.freebsd.org/threads/unable-to-pxe-boot-freebsd-install-system.71758/
# - Discusses PXE Problems (e.g. mentions pxechn.c32)
# - Mentions: Now, set DHCP option 17 (path exported on NFS, NFS Root path, no len limit, option root-path "10.0.1.4:/var/tmp/rootfs";)
# Also do: strings /isomnt/freebsd12/boot/pxeboot | less
label freebsd12
menu label FreeBSD 12 (BSD pxeboot)
# kw "pxe" is specific to NBP. "kernel" leads to loading ok, but "Booting kernel/failed: Invalid argument", "boot" - nothing (!).
# linux memdisk; initrd http://.../pxeboot; append raw; starts boot but freezes
kernel pxechn.c32
# Per https://wiki.syslinux.org/wiki/index.php?title=Pxechn.c32 this should work, but says cannot load
# (goes to pxechn.c32 that does not support http ?)
#initrd http://{{ httpserver }}/freebsd12/boot/pxeboot
# Said to work (https://forums.freebsd.org/threads/unable-to-pxe-boot-freebsd-install-system.71758/)but NFS ?:
# APPEND images/FreeBSD12-64/boot/pxeboot
# Dell laptop: Passes control to bootloader, but it crashes. No extra log items in TFTP
# Dell server: Boots to simple shell (not a full shell) w. ~ 15 commands (Test: show)
# The pxeboot tries to NFS-mount / of next-server: refused mount request from 11.78.12.10 for / (/): no export entry
# NOTE: FreeBSD pxeboot is hard-coded to do NFS ONLY, not TFTP (no support compiled in). Is able to derive TFTP server
# as NFS server to try, but hard-wires path (to mount) as '/' (boot.nfsroot.path).
# Sometimes fails (if enter is pressed ?). No manual keypresses are needed to boot (e.g. enter).
# FreeBSD smartly bundles it's own pxeboot on ISO image (/boot/pxeboot). Check: strings /isomnt/freebsd12/boot/pxeboot | grep FreeBSD
initrd ::pxeboot
# Try pxeboot by http from ISO loopmount
# initrd http://{{{ httpserver }}}/freebsd12/boot/pxeboot
# append raw

# Ver 3: https://forums.freebsd.org/threads/pxe-boot-server.74328/
# Note: This is effectively only a slight variant of "kernel pxechn.c32" + "initrd ::pxeboot" ... same kind of crash
# 2011 article https://blog.vx.sk/archives/46 recommends rename (for pxelinux) to pxeboot.0 and "KERNEL pxeboot.0"
# https://eerielinux.wordpress.com/2021/02/05/multi-os-pxe-booting-from-freebsd-12-pxe-menu-and-bsd-pt-3/
# "pxe pxeboot" early-crashes already pxelinux menu w/o any message.
# Dell server: graphics glitch (on menu), but seems to be alive. Works with menu.c32 (w/o VESA mode) !
# FreeBSD 12.1 pxeboot complains about /boot/loader/loader.lua . 26 commands menu (show, set usert, load, ...).
label freebsd12pxe
menu label FreeBSD 12 with PXE keyword
pxe pxeboot


# OpenBSD 7.0 Boots to installer (bsd/bsd.rd tftp download super slow)
# - Seems to vary slightly from PCBSD and FreeBSD
# - https://www.openbsd.org/ ( https://www.openbsd.org/faq/faq4.html#Download )
# - https://www.openbsd.org/faq/faq6.html#PXE
# - https://eradman.com/posts/autoinstall-openbsd.html
# - https://eerielinux.wordpress.com/2021/02/05/multi-os-pxe-booting-from-freebsd-12-pxe-menu-and-bsd-pt-3/
# - https://www.cyberciti.biz/faq/openbsd-boot-install-using-pxe-preboot-execution-environment/
# - Addl boot.conf options stty ... set ...
# - Misc downloads: https://cdn.openbsd.org/pub/OpenBSD/7.0/amd64/
#   - has pxeboot (3.53), which can be chain-loaded using http: by pxechn.32 (append)
#   - Readme file: INSTALL.amd64
#   - bsd.rd (rd=ram disk ?) is said to be "install kernel" (rd with kernel ?)
#   - OpenBSD pxeboot defaults to using TFTP on original next-server, default OS (ramdisk/kernel) fn/URL: tftp:/bsd/bsd.rd
# - Also: https://mirror.leaseweb.com/pub/OpenBSD/
# - For autoinstall, see: https://daulton.ca/2018/08/openbsd-pxe-server/
# - https://man.openbsd.org/autoinstall
# Bootloader (NBP): auto_install -> pxeboot.amd64 (Note: symlink is a must filename triggers auto installation !!!)
# Config: $tftproot/etc/boot.conf (stty com0 115200\nset tty com0)
# Recipe (e.g.): 00:1e:c9:4c:69:59-install.conf (http://server/00:1e:c9:4c:69:59-install.conf?path=6.7/amd64)
# URL to autopartitioning template for disklabel = http://172.16.0.1/openbsd-pgdb.disklabel
# Assumes ramdisk to reside on original TFTP host /bsd, but supports config in TFTP path /etc/boot.conf.
# Must be in fmt (e.g.): "boot tftp:/bsd/bsd.rd" (tftp: optional). This makes pxeboot auto-load the final OS.
# Unfortunately http not supported.
# There can also be file auto_install in tftp root, should be symlink to tftpboot.
# Also related: install.conf (recipe), which may be on http.
# Installer on ramdisk takes a long time to load from TFTP, there are 5 fetches logged from bsd/bsd.rd (4MB gzipped image)
# Installer prompts: Welcome to the OpenBSD/amd64 7.0 installation program.
# (I)nstall, (U)pgrade, (A)utoinstall or (S)hell?
# On shell there seems to be command "autoinstall" (Available network interfaces are: ... Which network should be used for initial DHCP request ? (or 'done'))
# (boot) filename from DHCP decides on auto-install (fn: auto_install
# triggers fetching of install.conf from http server (next-server)
# Autoinstall step-by-step guide: http://daemonforums.org/showthread.php?t=11034
# Way of telling if pxeboot is for OpenBSD: strings pxeboot | grep OpenBSD
# The ramdisk bsd.rd is avail either in the ISO or https://cdn.openbsd.org/pub/OpenBSD/7.0/amd64/bsd.rd
label openbsd70
menu label OpenBSD 7.0 by pxeboot
KERNEL pxechn.c32
# Need to be dedicated to OpenBSD ?
# HTTP download of pxeboot seems to work (pxeboot is not on ISO, must be downloaded separately from mirrors).
append http://{{{ httpserver }}}/pxeboot
# BSD ramdisk on ISO: /isomnt/openbsd70/7.0/amd64/bsd.rd


# mfsBSD ISO ( https://mfsbsd.vx.sk/ Boots to login: root/mfsroot. Full sys with shell and DNS)
# - Comes as 1) standard edition (87MB maint. and repair) 2) se = Special Edition (308MB, best for install) 3) mini (29MB)
# - http://www.wonkity.com/~wblock/docs/html/pxe.html
# - https://blog.vx.sk/archives/46 - recommends using BSD pxeboot
# - https://www.bsdcan.org/2010/schedule/attachments/142_pc-sysinstall-kris-moore-2010.pdf
# - To install run (recommended by docs, e.g.): zfsinstall
# - Has also /usr/sbin/bsdinstall, /usr/sbin/pc-sysinstall
# - Autoinstall:
#   - Start by: pc-sysinstall start-autoinstall <config> (pc-autoinstall.conf)
#   - Runs /usr/share/pc-sysinstall/backend/startautoinstall.sh with config file param (pc-autoinstall.conf ? low-level / phase 1)
#   - "pc_config:" (URL) is grepped from there,
#   downloads config by HTTP (URL pc_config, typical: /cust-install.cfg). Stores it to file $INSTALL_CFG (/tmp/pc-sysinstall.cfg).
#   runs "pc-sysinstall -c $INSTALL_CFG" (http downloaded config as param).
# On Boot: runs dhclient (auto discovers if, e.g. bxe0), launches full system and shell
# See: http://web.mit.edu/freebsd/head/usr.sbin/pc-sysinstall/examples/
# Lot of info (on booted system): /usr/share/pc-sysinstall/doc/help-start-autoinstall
label mfsbsd
menu label mfsBSD ISO (Live)
kernel memdisk
# "... .iso raw" (w/o append) crashes at "Loading boot sector... booting..."
# but APPEND iso raw should be ok (per https://eerielinux.wordpress.com/2021/02/05/multi-os-pxe-booting-from-freebsd-12-pxe-menu-and-bsd-pt-3/)
#initrd http://{{ httpserver }}/mfsbsd-12.1-RELEASE-amd64.iso raw
initrd http://{{ httpserver }}/mfsbsd-12.1-RELEASE-amd64.iso
append iso

# mfsBSD IMG (Boots fine to login root/mfsroot, like ISO)
# Boot-time Console output Line buffering is weird/fixed (lines come out intitially truncated)
label mfsbsd_img
menu label mfsBSD IMG (Live)
kernel memdisk
# "... .img raw" w/o any append:s alone should work.
initrd http://{{ httpserver }}/mfsbsd-12.1-RELEASE-amd64.img raw


# Arch Linux
# archiso_pxe_http hooks in archiso (https://wiki.archlinux.org/index.php/Archiso) it is possible to boot using HTTP (Also: NFS or NBD)
# https://wiki.archlinux.org/index.php/PXE
# https://www.archlinux.org/download/
# Note arch 2020 Changes kernel from arch/boot/x86_64/vmlinuz to arch/boot/x86_64/vmlinuz-linux
# https://www.forbes.com/sites/jasonevangelho/2019/06/10/arch-linux-os-challenge-2-alternatives-install-gui-script-easy/#3089c7ef4d94
#   https://github.com/picodotdev/alis - Arch Linux Install Script
# Arch Linux Challenge: https://docs.google.com/document/d/1kWQRBDL_N0CImPV5t0W2xj7bsAFcZOLmRsf-kX-eR9M/edit#heading=h.kk1966kbedef
# See also: https://github.com/wrzlbrmft/arch-install
# INITRD also allowed instead of append initrd=. Allows multiple vals per https://wiki.archlinux.org/index.php/PXE
# What is /archlinux/arch/boot/x86_64/initramfs-linux.img ?
# Fixed "_" to "-" in intel-ucode.img, amd-ucode.img and x86_64/archiso.img => x86_64/initramfs-linux.img
label archlinux
menu label Arch Linux (Live Console, No Auto Install)
kernel http://{{ httpserver }}/archlinux/arch/boot/x86_64/vmlinuz-linux
initrd http://{{ httpserver }}/archlinux/arch/boot/intel-ucode.img,http://{{ httpserver }}/archlinux/arch/boot/amd-ucode.img,http://{{ httpserver }}/archlinux/arch/boot/x86_64/initramfs-linux.img
# initrd=http://{{ httpserver }}/archlinux/arch/boot/x86_64/initramfs-linux.img
append archisobasedir=arch archiso_http_srv=http://{{ httpserver }}/archlinux/
sysappend 3

# Same as above, but has script=... with alis installer run wrapper (gotten from Linetboot)
# See /root/.zlogin => /root/.automated_script.sh on Arch ISO.
# https://shirotech.com/linux/how-to-automate-arch-linux-installation/
label archlinux_auto
menu label Arch Linux (Full Auto Install)
kernel http://{{ httpserver }}/archlinux/arch/boot/x86_64/vmlinuz-linux
initrd http://{{ httpserver }}/archlinux/arch/boot/intel-ucode.img,http://{{ httpserver }}/archlinux/arch/boot/amd-ucode.img,http://{{ httpserver }}/archlinux/arch/boot/x86_64/initramfs-linux.img
append archisobasedir=arch archiso_http_srv=http://{{ httpserver }}/archlinux/ script=http://{{ httpserver }}/scripts/arch_alis_run.sh
sysappend 3

# Alpine Linux (https://wiki.alpinelinux.org/wiki/PXE_boot)
# https://alpinelinux.org/downloads/
# Avail. as: Standard, Extended, Netboot and Virtual (+some others) flavors
# alpine_repo=... should be filled with apk repo (e.g. http://nl.alpinelinux.org/alpine/v2.5/main/)
# See also: https://wiki.alpinelinux.org/wiki/Alpine_Linux_package_management
# All alpine package repos seem to be server by nginx servers that do not allow dir listings (!)
# This shows ok: http://nl.alpinelinux.org/alpine/v3.7/main/
# APKINDEX.tar.gz seems to be the index file (Has ascii APKINDEX file w. k-v record structs in it)
# Pkg basename and version are in different fields, apk suffix aloways implied/assumed for package file.
# filename = field-P + '-' + field-V + ".apk"
# Installer appends arch (e.g. x86_64) to alpine_repo=.. value to get to index/package dir.
# Use the dir of file ".boot_repository" (0 B.) as alpine_repo=... path (in URL).
# Example of using fetch utility: fetch http://dl-3.alpinelinux.org/alpine/v3.6/main/x86_64/APKINDEX.tar.gz
# https://wiki.alpinelinux.org/wiki/Enable_Community_Repository
# https://wiki.alpinelinux.org/wiki/Installation
# https://wiki.alpinelinux.org/wiki/Alpine_setup_scripts
# https://docs.alpinelinux.org/user-handbook/0.1a/Installing/manual.html
# https://docs.alpinelinux.org/user-handbook/0.1a/Installing/setup_alpine.html#_answer_files
# https://docs.alpinelinux.org/user-handbook/0.1a/Installing/medium.html
# BOOTFS=ext4 BOOTLOADER=grub DISKLABEL=dos BOOTSIZE=... ROOTFS=ext4
# For apkovl=... (Alpine local backup) See: https://wiki.alpinelinux.org/wiki/Alpine_local_backup
# setup-alpine -f answerfile (Need alpine-conf package ?)
# ERROR: IP Requested but no network device was found
# /sbin/init not found in new root. Launching emergency recovery shell
# Note: if modloop has http support, modules on NFS are unnecessary (per manual)
# TODO: Use ssh_key=URL/sshkeys.pub (?)
# Google: Alpine PXE Boot
label alpine314
menu label Alpine v3.14.2 Std/Ext (?)
# Standard and Extended imgs: boot/vmlinuz-lts, initramfs-lts, boot/modloop-lts
linux  http://{{ httpserver }}/alpine314/boot/vmlinuz-lts
initrd http://{{ httpserver }}/alpine314/boot/initramfs-lts
# modloop is a ~100MB Squashfs
# modules=loop,squashfs,sd-mod,usb-storage
# Also (e.g): alpine_dev=nfs:192....:/srv/pxe. Need net module (e.g.) modprobe cnic ?
append ip=dhcp  alpine_repo=http://{{ httpserver }}/alpine314/apks modloop=http://{{ httpserver }}/alpine314/boot/modloop-lts
# apkovl=http://{{ httpserver }}/localhost.apkovl.tar.gz

label alpine314net
menu label Alpine v3.14.2 Net (?)
# Net imgs: boot/vmlinuz-lts, initramfs-lts, boot/modloop-lts
# (Also -virt versions avail in tar.gz)
# Does NOT have any alpine_repo=... dir in tar.gz
linux  http://{{ httpserver }}/alpine314net/boot/vmlinuz-lts
initrd http://{{ httpserver }}/alpine314net/boot/initramfs-lts
# modules=loop,squashfs,sd-mod,usb-storage
# Also (e.g): alpine_dev=nfs:192....:/srv/pxe. Need net module (e.g.) modprobe cnic ?
append ip=dhcp modloop=http://{{ httpserver }}/alpine314net/boot/modloop-lts

# FreeDOS
# http://www.ibiblio.org/pub/micro/pc-stuff/freedos/files/distributions/
#   - 1.1/fd11src.iso
#   - 1.2/FD12CD.iso
# Note: Identical FreeDOS image is also found on clonezilla (2.6.3-7) ISO: live/freedos.img (Size: 1474560, Same MD5)
label freedos1
menu label FreeDOS 1.0 (Live)
kernel /memdisk
# append initrd=http://{{ httpserver }}/freedos1/fdboot.img
# Depends on presence of clonezilla 2.6.3-7
append initrd=http://{{ httpserver }}/clonezilla/live/freedos.img


# Diskless client
# https://www.kernel.org/doc/Documentation/filesystems/nfs/nfsroot.txt
# - Google: ubuntu 18 diskless client
# https://help.ubuntu.com/community/DisklessUbuntuHowto
# https://unix.stackexchange.com/questions/238999/how-do-you-add-a-virtual-network-ip-address-from-the-kernel-command-line
# https://github.com/torvalds/linux/blob/master/net/ipv4/ipconfig.c#L1614
# https://www.cleanwinner.com/2019/10/19/setting-up-a-server-for-diskless-clients-using-ubutnu-18-04lts-server/
# https://www.hiroom2.com/2017/07/02/ubuntu-1604-pxeboot-thin-client-nfs-en/
# Github: joelandman/tiburon
# TODO (rsync support hard-links ?):
# - Root-Part:
#   - Hard-linked (h.l farms): /bin,/boot,/dev, /etc (DHCP), /lib, /lib32, /lib64, /libx32/, /run, /sbin
#   - Empty-single-dir Stubs: /cdrom, /home, lost+found, /media/, /mnt, /opt, /proc, /srv, /sys, /tmp, /usr,
#     (Different content may be mounted by diffwerent clients ?)
#   - Empty-dirtree: /var
# - Mount existing: /usr from sample w-s read-only, /home from homedir server (autofs), 
# - Actual final (?) kernel+initrd on NFS will be vmlinuz and /initrd.img
# - Modify: /etc/kernel/postinst.d/zz-update-grub, remove exec update-grub
# - Test Kernel CL ip=bootp or rarp
# - Possibly use: mkinitramfs (as advised in DisklessUbuntuHowto)
# Does initrd need to be specialized / dedicated to nfsboot (See: joelandman/tiburon)
#label diskless
#menu label Diskless Ubuntu18 Client
#kernel http://{{ httpserver }}/vmlinuz
#initrd http://{{ httpserver }}/initrd.img
#append  root=/dev/nfs nfsroot={{ nfsserver }}:/nfsroot/client-01 ip=dhcp rw verbose

# https://serverfault.com/questions/644793/what-are-the-attributes-required-by-the-component-element-in-windows-unatten
# https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2013/ms125692(v=vs.121)?redirectedfrom=MSDN
# Windows ISO (originally with embedded Autounattend.xml recipe, There's a sample Autounattend.xml template in tmpl/)
# See FreeBSD Boot for example on ISO based boot
label win2019
menu label Windows Server 2019
linux /memdisk
# Example of Original 4.9GB Media
#append iso initrd=http://{{ httpserver }}/Win2019_uefi_autoinstall.iso
initrd http://{{ httpserver }}/winpe.iso
append iso
# Not likely the below
#append raw

# iPXE test ipxe.lkrn works
label ipxe
menu label iPXE Chain
linux http://{{ httpserver }}/ipxe.lkrn
# initrd http://{{ httpserver }}/...

# ESXi Installer
# https://docs.vmware.com/en/VMware-vSphere/7.0/com.vmware.esxi.upgrade.doc/GUID-2F0D4696-3681-4C13-9552-5280C6406376.html
# Initial recommended TFTP subdir name format: ESXi-7.x.x-XXXXXX/
# boot.cfg would need to contain
# - TFTP server root relative subdir name for installer binaries (e.g.): prefix=ESXi-7.x.x-xxxxxx often empty
#  (if all from ISO is copied to root of TFTP)
#  - Seems ESXi 7.0 update 2 supports http prefixes (e.g.): prefix=http://192.168.30.6/esxi70u1c
# - Kernel options
#   - Kickstart location: kernelopt=ks=http://{{{ httpserver }}}/esxi-ks.cfg
#   - Other Installer kernel options: kernelopt=cdromBoot runweasel
#   - Note: if ks=http:// given, seems you should eliminate runweasel (and others ?)
# - Also: bootstate=0, title=Loading ESXi Installer, timeout=5, prefix=
# - kernel=tboot.b00 | b.b00, modules=... build=7.0.2-0.0.17630552
# - Modules: '---' delimited string of *.boo, *.v00, *.v01, *.gz
# Note: ISO should have example boot.cfg and mboot.efi (also has mboot.c32 ?)
# If module files (modules=...) are not in root of TFTP, remove all '/' in boot.cfg
# ( sed -i 's/\///g' /var/lib/tftpboot/esxi65u1/boot.cfg )
# Common convention on TFTP dirs (on copying ISO contents to) (e.g.): images/ESXiv6.5/
# https://williamlam.com/2015/10/support-for-uefi-pxe-boot-introduced-in-esxi-6-0.html
# - mboot.efi is on ISO in dir: efi/boot/bootx64.efi (copy to mboot.efi)
# ESXi KS example https://williamlam.com/2015/10/how-to-prompt-for-user-input-during-an-interactive-or-scripted-install-of-esxi.html
# http://patorjk.com/software/taag/#p=display&f=Standard&t=LinetBoot
# https://rudimartinsen.com/2018/03/27/building-a-pxe-boot-environment-for-esxi/
# mboot.c32 => /usr/lib/syslinux/modules/bios/mboot.c32 (ok for use ? NOT as VMWare mboot.c32 is totally custom installer)
# https://rudimartinsen.com/2019/02/12/pxe-boot-and-install-esxi-6-7-u1-remember-to-use-correct-boot-cfg-file/
# Good source info for ESXi PXE install: https://rudimartinsen.com/2019/08/07/revisiting-esxi-provisioning/
# Note: VMWare mboot.c32 is 10x bigger and is "COM executable (32-bit COMBOOT, relocatable)"
# (Not: "ELF 32-bit LSB shared object, Intel 80386, version 1 (SYSV), dynamically linked, stripped")
# http://www.vstellar.com/2017/07/25/automating-esxi-deployment-using-pxe-boot-and-kickstart/
# https://williamlam.com/2021/03/simplified-nested-esxi-installation-in-esxi-7-0-update-2-using-http-boot-over-virtualefi.html
#  - perform an HTTP Boot given the ESXi bootloader URL
# https://www.vmware.com/pdf/vsp_4_pxe_boot_esxi.pdf
# ks=... parameter can also be given on pxelinux menu append line: ... ks=... (instead of boot.cfg kernelopt=...)
# http://www.routereflector.com/2014/01/unattended-vmware-esxi-installation-via-pxe-boot-and-kickstart/
# Note: pxelinux.0 must come from the same syslinux version used on ESXi ISO.
# RH syslinux override suggested for pxelinux.0 menu.c32
# https://xenappblog.com/2018/automatically-install-vmware-esxi-6-7/
label esxi
menu label ESXi 7.X Installer
# This should be compatible with *pxelinux.0 (7.0 => syslinux 3.86)
kernel ESXi-7/mboot.c32
append -c ESXi-7/boot.cfg
ipappend 2

# SmartOS https://wiki.smartos.org/pxe-booting-smartos/
# https://eerielinux.wordpress.com/2021/02/20/multi-os-pxe-booting-from-freebsd-12-linux-illumos-and-more-pt-4-2/
label smartos
menu label SmartOS NetBoot
# Alternative (multiboot spec): kernel mboot.c32
# The long date token in example URL:s is ${smartos-build} (e.g. 20121004T212912Z), does not exist on ISO:s
kernel http://{{ httpserver }}/smartos/platform/i86pc/kernel/amd64/unix
initrd http://{{ httpserver }}/smartos/platform/i86pc/amd64/boot_archive
# Rescue: standalone=true,noimport=true,
append -B smartos=true,console=text,root_shadow='$5$2HOHRnK3$NvLlm.1KQBbB0WjoP7xcIwGnllhzp2HnT.mDO7DpxYA' --- smartos/platform/i86pc/amd64/boot_archive
# eerielinux (proven) way. Except: Ramdisk at ..., length ...  Not enough memory to decompress image (need 0x73a20e00 bytes)
# kernel memdisk
#initrd http://{{ httpserver }}/smartos-latest-USB.img.gz
#append harddisk raw

# CoreOS / Container OS / Fedora CoreOS (FCOS)
# Can't get interfaces up to working state. Try rd.neednet = 1
# /etc/multipath.conf does not exist. blacklisting all devices
# rd.multipath=default|0
# NetworkManager not starting because dbus not running (Also no config files for NM).
# Need to issue (e.g):
#   ip addr add 192.168.1.15/24 dev eno1
#   ip route add default via 192.168.1.1 dev eno1
# - Error in sos report: failed to fetch config: resource requires networking
# See tools in /usr/sbin/coreos-*
# - https://docs.fedoraproject.org/en-US/fedora-coreos/bare-metal/
# - Downloads: https://getfedora.org/en/coreos/download?tab=cloud_launchable&stream=stable&arch=x86_64
# - PXE Live https://docs.fedoraproject.org/en-US/fedora-coreos/live-reference/
#   - coreos.live.rootfs_url=...
# - Live Booting: https://docs.fedoraproject.org/en-US/fedora-coreos/live-booting/ (See "Using persistent state" for YAML example)
# - Getting Started: https://coreos.github.io/coreos-installer/getting-started/
# - rd.neednet needed ? https://github.com/coreos/fedora-coreos-tracker/issues/533
# - Networking requirements for user-provisioned infrastructure https://docs.okd.io/latest/installing/installing_bare_metal/installing-restricted-networks-bare-metal.html
# - https://www.portainer.io/blog/from-zero-to-production-with-fedora-coreos-portainer-and-wordpress-in-7-easy-steps
#   - See: Set the FCOS IP (setup networking manually by nmcli + ip addr add)
# - https://docs.fedoraproject.org/en-US/fedora-coreos/sysconfig-network-configuration/
#   - Explamanation of NM keyfile(s): https://developer-old.gnome.org/NetworkManager/stable/nm-settings-keyfile.html
#   - Configuring net if via kernel args (get processed by dracut modules)
#   - Propagate the install env. net conf: coreos-installer install --copy-network
#   - See: dracut.cmdline (Any RH/Centos, rd.info=1, rd.driver.pre=drvn1,drvn2, rd.driver.post=... rd.retry=...
#     rd.timeout=30, rd.debug, ip=dhcp|on|any, rd.bootif=0,
#  rd.net.dhcp.retry=5, rd.live.debug=1)
#   - coreos.inst.install_dev=
# - rd.neednet=1 https://github.com/coreos/fedora-coreos-tracker/issues/474
#   - Ignition: Fails to connect to external server to fetch other config to replace itself
#   - Explains: 1) install boot 2) subsequent ignition boot
# - https://forum.proxmox.com/threads/howto-wrapper-script-to-use-fedora-coreos-ignition-with-proxmox-cloud-init-system-for-docker-workloads.86494/
# - Kubernetes install on FCOS: https://www.matthiaspreu.com/posts/fedora-coreos-kubernetes-basic-setup/
label fcos
menu label Fedora CoreOS 36
# fedora-coreos-32.20200726.3.1-live-kernel-x86_64
kernel http://{{ httpserver }}/fcos/images/pxeboot/vmlinuz
# initrd from example fedora-coreos-32.20200726.3.1-live-initramfs.x86_64.img, fedora-coreos-32.20200726.3.1-live-rootfs.x86_64.img
# APPEND
initrd http://{{ httpserver }}/fcos/images/pxeboot/initrd.img,http://{{ httpserver }}/fcos/images/pxeboot/rootfs.img
# Live PXE:
# As of 2022-04
# - Add: coreos.live.rootfs_url=http://{{ httpserver }}/fcos/images/pxeboot/rootfs.img AND
# - Remove rootfs URL from initrd line (latter URL)
append rd.neednet=1 ignition.firstboot ignition.platform.id=metal ignition.config.url=http://{{ httpserver }}/config.ign systemd.unified_cgroup_hierarchy=0
# Install ???
# append coreos.inst.install_dev=/dev/sda coreos.inst.ignition_url=http://{{ httpserver }}/config.ign
# Advised in /live-booting/
ipappend 2
