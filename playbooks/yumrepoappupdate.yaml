# ## Update a YUM Repo based application
# 
# Assumes that repo file for app is present (in yum.repos.d) and is in somewhat standard format (with enabled = ... flag present).
# 
# Example of running:
# ```
# ansible-playbook yumrepoappupdate.yaml -e "pkgname=myapp repofn=myapp.repo appver=" --limit mytesthost
# ```
# ## Notes on usage
# 
# - This playbook is aplicable only for a simple .repo file with single
# repository entry in it (single [...] INI section). TODO: Add
# detection for multple ini-sections and exit if these are found.
# - The 
# 
# # Additional Info
# A handy (python) command to output all YUM variables usable /
# frequently used in .repo files
# ```
# python3 -c 'import dnf, json; db = dnf.dnf.Base(); print(json.dumps(db.conf.substitutions, indent=2))'
# ```
# ## TODO
# - Support multiple packages
# - Support repo files w. multiple repo definitions (multiple ini sections).
#   Seems ansible "replace" might work (user param replace: ..., not line: ...) - check "replace" Sysnopsis before applying
#   ("It is up to the user to maintain idempotence by ensuring that the same pattern would never match any replacements made.")
- name: Update Yum Repo Based APp
  hosts: all
  become: true
  gather_facts: false
  vars:
    # Package / app name (must be a complete, valid package name)
    pkgname: curl
    # Concrete repo filename in /etc/yum.repos.d
    repofn: curl.repo
    repofile_basepath: /etc/yum.repos.d
    # Empty => Default to "latest" (whatever comes with `yum update myapp`)
    # By giving explicit version here gives you control over which version to install.
    appver: ""
    # Pass upmethod=upgrade to force the (more risky and forceful) upgrade (may remove obsolete packages)
    upmethod: update
  tasks:
    # Repo file MUST exist, let this exit if not found
    - name: Check that repo file is there
      shell: 'test -f {{repofile_basepath}}/{{repofn}}'
    - name: Enable Repo / App Update
      lineinfile:
        path: '{{repofile_basepath}}/{{repofn}}'
        line: 'enabled = 1'
        #replace: 'enabled = 1'
        # Allow any value
        regexp: '^enabled\s*=\s*\d'
    # This step will increase duration of Meta Info / Cache update, but may be necessary for robust operation
    # YUM is notorious for corrupting Meta data / Cache and as a result refusing to install package.
    - name: Clean YUM Cache / Meta-data
      shell: yum clean all
    # yum check-update returns exit value 100 even on success !! Thus ignore_errors
    - name: Refresh Package Meta data
      shell: yum check-update
      ignore_errors: true
    - name: Update App Package
      shell: 'yum {{upmethod}} -y {% if appver  %}{{ pkgname}}-{{appver}}{% else %}{{ pkgname}}{% endif %}'
      ignore_errors: true
    - name: Disable Repo / App Update
      lineinfile:
        path: '{{repofile_basepath}}/{{repofn}}'
        line: 'enabled = 0'
        #replace: 'enabled = 0'
        # Allow any value
        regexp: '^enabled\s*=\s*\d'
    - name: Refresh Package Meta data
      shell: yum check-update
      ignore_errors: true
    #- name: Advise to check App Update Availabliliy
    #- debug: 'Use yum list available myapp to see that package is NOT available'
