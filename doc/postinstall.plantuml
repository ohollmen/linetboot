@startuml
skinparam roundcorner 10
title OS Post Install Next-Boot Polling

participant "OS Installer" as Client
box "Linetboot"
participant "Linetboot\nOSInstall" as HTTP

'participant "Parameter Creation" as Para
'participant "Tmpl Store" as TS
'participant "Tmpl Engine" as TE

participant "LinetBoot HTTP\nMedia Store" as media
participant "LinetBoot Post\nInstall Agent" as pi

end box

participant "User-Custom\nPostInst\nActions" as exec

'hnote over Client: Get Network Interface up

'Client -> HTTP: Request Recipe (e.g. by URL in kernel command line)

'hnote over HTTP: Detect IP Address of client (Host Identity, for facts lookup)
'hnote over HTTP: Detect the kind of Recipe to generate from URL (e.g. /ks.cfg => RH Kickstart)
'hnote over HTTP: Lookup facts or generate "fake-facts" for new hosts (by IP Addr)

'HTTP -> Para: Create Parameters

' hnote over Para: Global Main Config\nHost Facts\nNet (global+host)\nDisk (host)\nInitial User\nPackages Repo / Mirror\nOS Hint

'hnote over Para
'* Global Main Config
'* Host Facts
'** Net (global+host)
'** Disk (host)
'** Initial User
'** Packages Repo / Mirror
'** OS Type Hint
'end hnote

'HTTP <- Para: Return Parameters Structure ""{net: {}, ...}""

'hnote over HTTP: Complete Parameters (private deep copy)

'HTTP -> TS: Get Correct Template for current OS Install (e.g. ks.cfg.tmpl)
'HTTP <- TS:

'HTTP -> TE: Generate Templated Output: ""out = TmplEngine.render(tmpl, params)""
'HTTP <- TE: "The Recipe"

Client <- HTTP: Send complete Recipe to OS Installer (in correct format)

hnote over Client: Start OS Installation

'Client -> media: Request Install packages
'Client <- media: Fetch and Install

group Fetch and Install all needed (N) packages
Client -> media: Request SW Packages
' HTTP <-> media
Client <-- media: Deb: *.deb,*.udeb, RH: *.rpm
end

hnote over Client: Post-Operations\n(RH: **%post**, Preseed **late_command**)

Client -> HTTP: Request Post Scripts
Client <- HTTP: Fetch, chmod (a+x) and Run

Client -> HTTP: Request SSH Public key (reverse ssh-copy-id by HTTP)
Client <- HTTP: Add key to ~/.ssh/authorized_keys

Client -> HTTP: Signal **end** event
note over HTTP: Detect Install Client IP Address
HTTP -> pi: Trigger First Boot (Post Install) Waiting

hnote over Client: End Installation, Issue Reboot
== Reboot ==
note over Client: First new-OS Boot
note over pi: poll by SSH\nwait for OS Client to boot up\npasswordless SSH
'note right
'poll by SSH
'wait for OS Client to boot up
'passwordless SSH
'end note

group Poll "Host-up" by SSH (Till success or exhausting try-count)

Client <- pi: Test SSH by login
Client -> pi: *Fail*

note over Client: BIOS Init

Client <- pi: Test SSH by login
Client -> pi: *Fail*

note over Client:Boot new Local OS

Client <- pi: Test SSH by login
Client -> pi: *Fail*

note over Client:Start SSH Service

Client <- pi: Test SSH by login
Client -> pi: **Success**

end

pi -> exec: Run Post Install Provisioning


exec -> Client: Provision additional features (SSH, SSH-exec, SCP, Ansible, rsync, Git, HTTP ...)



footer (C) Olli Hollmen 2020
@enduml
